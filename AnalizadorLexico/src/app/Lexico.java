/* The following code was generated by JFlex 1.7.0 */

package app;
import java_cup.runtime.*;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\3\1\0\2\3\22\0\1\3\1\14\5\0\1\50\1\31"+
    "\1\32\1\5\1\10\1\40\1\11\1\41\1\4\1\51\1\53\10\2"+
    "\1\6\1\37\1\12\1\7\1\13\2\0\1\15\1\1\1\66\1\17"+
    "\1\44\1\60\1\54\1\64\1\43\2\1\1\61\1\71\1\16\1\23"+
    "\1\70\1\1\1\24\1\56\1\27\2\1\1\42\3\1\1\35\1\0"+
    "\1\36\3\0\1\20\1\52\1\67\1\22\1\47\1\62\1\55\1\65"+
    "\1\46\2\1\1\63\1\73\1\21\1\25\1\72\1\1\1\26\1\57"+
    "\1\30\2\1\1\45\3\1\1\33\1\0\1\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\1\12\2\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\6\2\1\1\1\3\10\2\1\26\2\0\1\27\1\30"+
    "\1\31\1\32\1\33\6\2\1\34\10\2\1\35\5\2"+
    "\1\0\1\36\1\0\11\2\1\0\1\37\1\40\1\41"+
    "\17\2\1\42\11\2\1\0\2\2\1\43\11\2\1\44"+
    "\14\2\1\0\2\2\1\45\1\46\3\2\1\47\5\2"+
    "\1\50\5\2\1\4\10\2\1\51\7\2\1\52\10\2"+
    "\2\0\6\2\4\0\6\2\4\0\6\2\10\0\2\2"+
    "\10\0\1\53\22\0\1\54\4\0\1\55\10\0\1\56"+
    "\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\74\0\u0168"+
    "\0\u01a4\0\74\0\74\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0"+
    "\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870"+
    "\0\u08ac\0\u04ec\0\u08e8\0\u0924\0\74\0\74\0\74\0\74"+
    "\0\74\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\170"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\170\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0690\0\74"+
    "\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\74\0\170\0\170\0\u1068\0\u10a4"+
    "\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284"+
    "\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u0dd4\0\u13ec\0\u1428"+
    "\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608"+
    "\0\u1644\0\u1680\0\170\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac"+
    "\0\u17e8\0\u1824\0\u1860\0\u189c\0\170\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\170\0\170\0\u1c5c\0\u1c98"+
    "\0\u1cd4\0\170\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\170"+
    "\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\74\0\u1f68\0\u1fa4"+
    "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\170\0\u2148"+
    "\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\170\0\u22ec"+
    "\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc"+
    "\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac"+
    "\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c"+
    "\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c"+
    "\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\170\0\u2f94\0\u2fd0"+
    "\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0"+
    "\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390"+
    "\0\74\0\u33cc\0\u3408\0\u3444\0\u3480\0\74\0\u34bc\0\u34f8"+
    "\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660\0\74\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\3\1\26\1\3\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\3\1\4\2\3\1\52\1\53\1\54"+
    "\1\3\1\55\3\3\1\56\1\57\1\60\1\3\1\61"+
    "\1\3\75\0\2\3\12\0\14\3\11\0\6\3\1\0"+
    "\23\3\2\0\1\4\36\0\1\62\7\0\1\4\1\0"+
    "\1\4\23\0\1\5\74\0\1\63\75\0\1\64\1\65"+
    "\73\0\1\66\73\0\1\67\73\0\1\70\73\0\1\71"+
    "\65\0\2\3\12\0\1\3\1\72\12\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\12\0\6\3\1\73\5\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\12\0\14\3"+
    "\11\0\2\3\1\74\3\3\1\0\23\3\1\0\2\3"+
    "\12\0\4\3\1\75\7\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\12\0\10\3\1\76\3\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\12\0\14\3\11\0\5\3"+
    "\1\77\1\0\23\3\1\0\2\3\12\0\7\3\1\100"+
    "\4\3\11\0\6\3\1\0\23\3\1\0\2\3\12\0"+
    "\11\3\1\100\2\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\12\0\14\3\11\0\6\3\1\0\13\3\1\101"+
    "\1\102\6\3\1\0\2\3\12\0\14\3\11\0\6\3"+
    "\1\0\14\3\1\102\6\3\2\0\1\62\46\0\1\62"+
    "\1\0\1\62\21\0\2\3\12\0\7\3\1\103\1\3"+
    "\1\104\2\3\11\0\6\3\1\0\13\3\1\105\1\106"+
    "\6\3\1\0\2\3\12\0\1\3\1\107\2\3\1\110"+
    "\7\3\11\0\6\3\1\0\7\3\1\111\1\3\1\111"+
    "\11\3\1\0\2\3\12\0\1\3\1\112\2\3\1\113"+
    "\7\3\11\0\6\3\1\0\10\3\1\114\1\3\1\115"+
    "\10\3\1\0\2\3\12\0\11\3\1\104\2\3\11\0"+
    "\6\3\1\0\14\3\1\106\6\3\1\0\2\3\12\0"+
    "\4\3\1\110\7\3\11\0\6\3\1\0\11\3\1\111"+
    "\11\3\1\0\2\3\12\0\4\3\1\116\7\3\11\0"+
    "\6\3\1\0\12\3\1\115\10\3\1\0\3\117\11\0"+
    "\14\117\11\0\6\117\1\120\23\117\2\0\1\4\36\0"+
    "\1\62\7\0\1\4\1\121\1\4\21\0\2\3\12\0"+
    "\12\3\1\122\1\123\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\12\0\13\3\1\123\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\12\0\14\3\11\0\6\3\1\0\10\3"+
    "\1\124\1\3\1\125\10\3\1\0\2\3\12\0\14\3"+
    "\11\0\6\3\1\0\12\3\1\125\10\3\1\0\2\3"+
    "\12\0\6\3\1\126\1\3\1\127\3\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\12\0\10\3\1\130\3\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\12\0\7\3"+
    "\1\131\4\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\12\0\11\3\1\132\2\3\11\0\6\3\1\0\23\3"+
    "\5\0\1\133\75\0\1\134\65\0\2\3\12\0\2\3"+
    "\1\135\11\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\12\0\12\3\1\136\1\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\12\0\14\3\11\0\6\3\1\0\15\3"+
    "\1\137\5\3\1\0\2\3\12\0\5\3\1\135\6\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\12\0\13\3"+
    "\1\136\11\0\6\3\1\0\23\3\1\0\2\3\12\0"+
    "\14\3\11\0\6\3\1\0\16\3\1\140\4\3\1\0"+
    "\2\3\12\0\14\3\11\0\2\3\1\141\3\3\1\0"+
    "\23\3\1\0\2\3\12\0\14\3\11\0\5\3\1\142"+
    "\1\0\23\3\1\0\2\3\12\0\14\3\11\0\1\3"+
    "\1\143\4\3\1\0\23\3\1\0\2\3\12\0\14\3"+
    "\11\0\4\3\1\144\1\3\1\0\23\3\1\0\2\3"+
    "\12\0\14\3\11\0\1\3\1\145\4\3\1\0\23\3"+
    "\1\0\2\3\12\0\14\3\11\0\4\3\1\146\1\3"+
    "\1\0\23\3\1\0\2\3\12\0\12\3\1\147\1\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\12\0\13\3"+
    "\1\150\11\0\6\3\1\0\23\3\1\0\2\3\12\0"+
    "\2\3\1\151\11\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\12\0\5\3\1\152\6\3\11\0\6\3\1\0"+
    "\23\3\1\0\2\3\12\0\14\3\11\0\6\3\1\0"+
    "\5\3\1\153\15\3\1\0\2\3\12\0\14\3\11\0"+
    "\6\3\1\0\6\3\1\154\14\3\1\0\2\3\12\0"+
    "\5\3\1\155\6\3\11\0\6\3\1\0\23\3\51\0"+
    "\1\156\1\0\1\156\21\0\2\3\12\0\7\3\1\157"+
    "\4\3\11\0\6\3\1\0\23\3\1\0\2\3\12\0"+
    "\11\3\1\160\2\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\12\0\6\3\1\161\5\3\11\0\6\3\1\0"+
    "\23\3\1\0\2\3\12\0\10\3\1\162\3\3\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\12\0\1\3\1\163"+
    "\12\3\11\0\6\3\1\0\23\3\1\0\2\3\12\0"+
    "\4\3\1\164\7\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\12\0\4\3\1\165\7\3\11\0\6\3\1\0"+
    "\23\3\1\0\2\3\12\0\6\3\1\166\5\3\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\12\0\10\3\1\167"+
    "\3\3\11\0\6\3\1\0\23\3\5\133\1\170\66\133"+
    "\1\0\2\3\12\0\14\3\11\0\6\3\1\0\10\3"+
    "\1\171\12\3\1\0\2\3\12\0\14\3\11\0\6\3"+
    "\1\0\12\3\1\172\10\3\1\0\2\3\12\0\1\3"+
    "\1\173\12\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\12\0\4\3\1\173\7\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\12\0\12\3\1\174\1\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\12\0\13\3\1\175\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\12\0\14\3\11\0"+
    "\6\3\1\0\10\3\1\176\12\3\1\0\2\3\12\0"+
    "\14\3\11\0\6\3\1\0\12\3\1\177\10\3\1\0"+
    "\2\3\12\0\14\3\11\0\2\3\1\200\3\3\1\0"+
    "\23\3\1\0\2\3\12\0\14\3\11\0\5\3\1\201"+
    "\1\0\23\3\1\0\2\3\12\0\2\3\1\202\11\3"+
    "\11\0\1\3\1\203\4\3\1\0\17\3\1\204\3\3"+
    "\1\0\2\3\12\0\14\3\11\0\1\3\1\203\4\3"+
    "\1\0\23\3\1\0\2\3\12\0\14\3\11\0\2\3"+
    "\1\205\3\3\1\0\23\3\1\0\2\3\12\0\14\3"+
    "\11\0\5\3\1\205\1\0\23\3\1\0\2\3\12\0"+
    "\5\3\1\206\6\3\11\0\4\3\1\207\1\3\1\0"+
    "\21\3\1\210\1\3\1\0\2\3\12\0\14\3\11\0"+
    "\1\3\1\211\4\3\1\0\23\3\1\0\2\3\12\0"+
    "\14\3\11\0\4\3\1\212\1\3\1\0\23\3\1\0"+
    "\2\3\12\0\1\213\13\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\12\0\3\3\1\214\10\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\12\0\12\3\1\215\1\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\12\0\13\3"+
    "\1\216\11\0\6\3\1\0\23\3\1\0\2\3\12\0"+
    "\13\3\1\217\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\12\0\14\3\11\0\6\3\1\0\3\3\1\220\17\3"+
    "\1\0\2\3\12\0\14\3\11\0\6\3\1\0\4\3"+
    "\1\221\16\3\4\133\1\222\1\170\66\133\1\0\2\3"+
    "\12\0\1\223\13\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\12\0\3\3\1\224\10\3\11\0\6\3\1\0"+
    "\23\3\1\0\2\3\12\0\14\3\11\0\2\3\1\225"+
    "\3\3\1\0\23\3\1\0\2\3\12\0\14\3\11\0"+
    "\5\3\1\225\1\0\23\3\1\0\2\3\12\0\14\3"+
    "\11\0\2\3\1\226\3\3\1\0\23\3\1\0\2\3"+
    "\12\0\14\3\11\0\5\3\1\226\1\0\23\3\1\0"+
    "\2\3\12\0\14\3\11\0\6\3\1\0\3\3\1\227"+
    "\17\3\1\0\2\3\12\0\14\3\11\0\6\3\1\0"+
    "\4\3\1\230\16\3\1\0\2\3\12\0\14\3\11\0"+
    "\2\3\1\231\3\3\1\0\23\3\1\0\2\3\12\0"+
    "\14\3\11\0\6\3\1\0\7\3\1\232\13\3\1\0"+
    "\2\3\12\0\7\3\1\233\4\3\11\0\6\3\1\0"+
    "\23\3\1\0\2\3\12\0\14\3\11\0\5\3\1\234"+
    "\1\0\23\3\1\0\2\3\12\0\14\3\11\0\6\3"+
    "\1\0\11\3\1\232\11\3\1\0\2\3\12\0\11\3"+
    "\1\235\2\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\12\0\1\3\1\236\12\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\12\0\4\3\1\237\7\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\12\0\12\3\1\240\1\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\12\0\13\3"+
    "\1\240\11\0\6\3\1\0\23\3\1\0\2\3\12\0"+
    "\1\241\13\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\12\0\3\3\1\242\10\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\12\0\3\3\1\243\10\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\12\0\7\3\1\244\4\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\12\0\11\3"+
    "\1\245\2\3\11\0\6\3\1\0\23\3\4\133\1\246"+
    "\1\170\66\133\1\0\2\3\12\0\7\3\1\247\4\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\12\0\11\3"+
    "\1\250\2\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\12\0\14\3\11\0\2\3\1\251\3\3\1\0\23\3"+
    "\1\0\2\3\12\0\14\3\11\0\5\3\1\252\1\0"+
    "\23\3\1\0\2\3\12\0\14\3\11\0\6\3\1\0"+
    "\15\3\1\253\5\3\1\0\2\3\12\0\6\3\1\254"+
    "\5\3\11\0\6\3\1\0\23\3\1\0\2\3\12\0"+
    "\14\3\11\0\6\3\1\0\16\3\1\255\4\3\1\0"+
    "\2\3\12\0\10\3\1\256\3\3\11\0\6\3\1\0"+
    "\23\3\1\0\2\3\12\0\14\3\11\0\6\3\1\0"+
    "\3\3\1\257\17\3\1\0\2\3\12\0\14\3\11\0"+
    "\6\3\1\0\4\3\1\257\16\3\1\0\2\3\12\0"+
    "\7\3\1\260\4\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\12\0\11\3\1\261\2\3\11\0\6\3\1\0"+
    "\23\3\1\0\2\3\12\0\11\3\1\262\2\3\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\12\0\1\263\13\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\12\0\3\3"+
    "\1\264\10\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\12\0\14\3\11\0\2\3\1\265\3\3\1\0\23\3"+
    "\1\0\2\3\12\0\14\3\11\0\5\3\1\266\1\0"+
    "\23\3\1\0\2\3\12\0\7\3\1\267\4\3\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\12\0\11\3\1\267"+
    "\2\3\11\0\6\3\1\0\23\3\1\0\2\3\12\0"+
    "\14\3\11\0\6\3\1\0\10\3\1\270\12\3\1\0"+
    "\2\3\12\0\14\3\11\0\6\3\1\0\3\3\1\271"+
    "\17\3\1\0\2\3\12\0\14\3\11\0\6\3\1\0"+
    "\12\3\1\272\10\3\1\0\2\3\12\0\14\3\11\0"+
    "\6\3\1\0\4\3\1\273\16\3\1\0\2\3\12\0"+
    "\14\3\11\0\6\3\1\0\17\3\1\274\3\3\1\0"+
    "\2\3\12\0\14\3\11\0\6\3\1\0\17\3\1\275"+
    "\3\3\1\0\2\3\12\0\14\3\11\0\6\3\1\0"+
    "\17\3\1\275\1\3\1\275\1\3\1\0\2\3\12\0"+
    "\14\3\11\0\6\3\1\0\20\3\1\276\2\3\1\0"+
    "\2\3\12\0\14\3\11\0\6\3\1\0\22\3\1\277"+
    "\1\0\2\3\12\0\14\3\10\0\1\300\6\3\1\0"+
    "\23\3\1\0\2\3\12\0\14\3\10\0\1\301\6\3"+
    "\1\0\23\3\1\0\2\3\12\0\1\302\13\3\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\12\0\7\3\1\303"+
    "\4\3\11\0\6\3\1\0\23\3\1\0\2\3\12\0"+
    "\3\3\1\304\10\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\12\0\11\3\1\305\2\3\11\0\6\3\1\0"+
    "\23\3\1\0\2\3\12\0\7\3\1\306\4\3\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\12\0\11\3\1\307"+
    "\2\3\11\0\6\3\1\0\23\3\1\0\2\3\12\0"+
    "\14\3\10\0\1\310\6\3\1\0\23\3\1\0\2\3"+
    "\12\0\14\3\10\0\1\311\6\3\1\0\23\3\56\0"+
    "\1\312\74\0\1\313\15\0\2\3\12\0\7\3\1\314"+
    "\4\3\11\0\6\3\1\0\23\3\1\0\2\3\12\0"+
    "\1\315\13\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\12\0\11\3\1\316\2\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\12\0\3\3\1\317\10\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\12\0\14\3\11\0\1\3"+
    "\1\320\4\3\1\0\23\3\1\0\2\3\12\0\14\3"+
    "\11\0\4\3\1\321\1\3\1\0\23\3\56\0\1\322"+
    "\74\0\1\323\60\0\1\324\76\0\1\325\25\0\2\3"+
    "\12\0\14\3\11\0\2\3\1\326\3\3\1\0\23\3"+
    "\1\0\2\3\12\0\14\3\11\0\6\3\1\0\20\3"+
    "\1\327\2\3\1\0\2\3\12\0\14\3\11\0\5\3"+
    "\1\330\1\0\23\3\1\0\2\3\12\0\14\3\11\0"+
    "\6\3\1\0\22\3\1\331\1\0\2\3\12\0\14\3"+
    "\11\0\6\3\1\0\20\3\1\332\2\3\1\0\2\3"+
    "\12\0\14\3\11\0\6\3\1\0\22\3\1\333\44\0"+
    "\1\334\76\0\1\335\112\0\1\336\74\0\1\337\5\0"+
    "\2\3\12\0\14\3\10\0\1\340\6\3\1\0\23\3"+
    "\1\0\2\3\12\0\14\3\10\0\1\341\6\3\1\0"+
    "\23\3\1\0\2\3\12\0\14\3\10\0\1\342\6\3"+
    "\1\0\23\3\1\0\2\3\12\0\14\3\10\0\1\343"+
    "\6\3\1\0\23\3\1\0\2\3\12\0\6\3\1\344"+
    "\5\3\11\0\6\3\1\0\23\3\1\0\2\3\12\0"+
    "\10\3\1\345\3\3\11\0\6\3\1\0\23\3\66\0"+
    "\1\346\74\0\1\347\33\0\1\350\74\0\1\351\121\0"+
    "\1\352\73\0\1\353\74\0\1\354\73\0\1\355\15\0"+
    "\2\3\12\0\14\3\11\0\6\3\1\0\5\3\1\356"+
    "\15\3\1\0\2\3\12\0\14\3\11\0\6\3\1\0"+
    "\6\3\1\356\14\3\27\0\1\357\74\0\1\360\106\0"+
    "\1\361\76\0\1\362\71\0\1\363\73\0\1\364\76\0"+
    "\1\365\73\0\1\366\67\0\1\367\76\0\1\370\50\0"+
    "\1\371\75\0\1\372\134\0\1\373\73\0\1\374\74\0"+
    "\1\375\73\0\1\376\27\0\1\377\75\0\1\u0100\64\0"+
    "\1\u0101\76\0\1\u0101\101\0\1\u0102\73\0\1\u0103\74\0"+
    "\1\u0104\73\0\1\u0105\61\0\1\u0106\76\0\1\u0106\115\0"+
    "\1\u0107\73\0\1\u0108\76\0\1\u0109\73\0\1\u010a\50\0"+
    "\1\u010b\73\0\1\u010c\75\0\1\u010d\73\0\1\u010e\64\0"+
    "\1\u010f\73\0\1\u0110\76\0\1\u010f\73\0\1\u0110\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13980];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\2\11\15\1\10\11"+
    "\22\1\2\0\5\11\25\1\1\0\1\11\1\0\11\1"+
    "\1\0\1\11\33\1\1\0\31\1\1\0\23\1\1\11"+
    "\31\1\2\0\6\1\4\0\6\1\4\0\6\1\10\0"+
    "\2\1\10\0\1\1\22\0\1\11\4\0\1\11\10\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private ArrayList<String> lista = new ArrayList<>();
    private ArrayList<SymbolTableEntry> tsEntries = new ArrayList<>();
    
    public ArrayList getList() {
        return this.lista;
    }

    public void vaciarLista() {
        this.lista.clear();
    }

    public ArrayList<SymbolTableEntry> getTS(){
        return this.tsEntries;
    }

    public void agregarATablaDeSimbolos(String token, String valor) {
      boolean existe = false;
      for (SymbolTableEntry entrada : tsEntries) {
        if (entrada.getToken().equals(token) && ((entrada.getNombre().equals(valor)) || (entrada.getNombre().equals("_" + valor)))) {
          existe = true;
          }
      }

      if (!existe) tsEntries.add(new SymbolTableEntry(valor, token));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
 * @throws Exception 
   */
  public java_cup.runtime.Symbol next_token() throws Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Exception("Caracter no permitido: <" + yytext() + "> en la linea");
            } 
            // fall through
          case 48: break;
          case 2: 
            { lista.add("Token ID, encontrado Lexema "+ yytext());
    //System.out.println("Token ID, encontrado Lexema "+ yytext()); 
    agregarATablaDeSimbolos("ID", yytext());
    return new Symbol(sym.ID, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 49: break;
          case 3: 
            { //System.out.println("Token CONST_INTEGER, encontrado Lexema "+ yytext());
    if((Integer.parseInt(yytext()) >= 0) && (Integer.parseInt(yytext()) <= 65536))
    {
        agregarATablaDeSimbolos("CONST_INTEGER", yytext());
        lista.add("Token CONST_INTEGER, encontrado Lexema "+ yytext());
        return new Symbol(sym.CONST_INTEGER, yycolumn + 1, yyline + 1, yytext());
    } else {
        throw new Exception("Constante integer fuera de rango: |" + yytext() + "|" );
    }
            } 
            // fall through
          case 50: break;
          case 4: 
            { /* no se realiza accion por lo tanto se ignoran*/
            } 
            // fall through
          case 51: break;
          case 5: 
            { lista.add("Token OP_DIVISION, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_DIVISION encontrado, Lexema "+ yytext());
    return new Symbol(sym.OP_DIVISION, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 52: break;
          case 6: 
            { lista.add("Token OP_MULTIPLICACION, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_MULTIPLICACION encontrado, Lexema "+ yytext());
    return new Symbol(sym.OP_MULTIPLICACION, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 53: break;
          case 7: 
            { lista.add("Token DOS_PUNTOS, encontrado Lexema "+ yytext());
    //System.out.println("Token DOS_PUNTOS encontrado, Lexema "+ yytext());
    return new Symbol(sym.DOS_PUNTOS, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 54: break;
          case 8: 
            { lista.add("Token IGUAL, encontrado Lexema "+ yytext());
    //System.out.println("Token IGUAL encontrado, Lexema "+ yytext());
    return new Symbol(sym.IGUAL, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 55: break;
          case 9: 
            { lista.add("Token OP_SUMA, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_SUMA encontrado, Lexema "+ yytext());
    return new Symbol(sym.OP_SUMA, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 56: break;
          case 10: 
            { lista.add("Token OP_RESTA, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_RESTA encontrado, Lexema "+ yytext());
    return new Symbol(sym.OP_RESTA, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 57: break;
          case 11: 
            { lista.add("Token OP_MENOR, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_MENOR encontrado, Lexema "+ yytext());
    return new Symbol(sym.OP_MENOR, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 58: break;
          case 12: 
            { lista.add("Token OP_MAYOR, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_MAYOR encontrado, Lexema "+ yytext());
    return new Symbol(sym.OP_MAYOR, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 59: break;
          case 13: 
            { lista.add("Token PARENTESIS_ABRE, encontrado Lexema "+ yytext());
    //System.out.println("Token PARENTESIS_ABRE encontrado, Lexema "+ yytext());
    return new Symbol(sym.PARENTESIS_ABRE, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 60: break;
          case 14: 
            { lista.add("Token PARENTESIS_CIERRA, encontrado Lexema "+ yytext());
    //System.out.println("Token PARENTESIS_CIERRA encontrado, Lexema "+ yytext());
    return new Symbol(sym.PARENTESIS_CIERRA, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 61: break;
          case 15: 
            { lista.add("Token LLAVE_ABRE, encontrado Lexema "+ yytext());
    //System.out.println("Token LLAVE_ABRE encontrado, Lexema "+ yytext());
    return new Symbol(sym.LLAVE_ABRE, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 62: break;
          case 16: 
            { lista.add("Token LLAVE_CIERRA, encontrado Lexema "+ yytext());
    //System.out.println("Token LLAVE_CIERRA encontrado, Lexema "+ yytext());
    return new Symbol(sym.LLAVE_CIERRA, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 63: break;
          case 17: 
            { lista.add("Token CORCHETE_ABRE, encontrado Lexema "+ yytext());
    //System.out.println("Token CORCHETE_ABRE encontrado, Lexema "+ yytext());
    return new Symbol(sym.CORCHETE_ABRE, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 64: break;
          case 18: 
            { lista.add("Token CORCHETE_CIERRA, encontrado Lexema "+ yytext());
    //System.out.println("Token CORCHETE_CIERRA encontrado, Lexema "+ yytext());
    return new Symbol(sym.CORCHETE_CIERRA, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 65: break;
          case 19: 
            { lista.add("Token PUNTO_COMA, encontrado Lexema "+ yytext());
    //System.out.println("Token PUNTO_COMA encontrado, Lexema "+ yytext());
    return new Symbol(sym.PUNTO_COMA, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 66: break;
          case 20: 
            { lista.add("Token COMA, encontrado Lexema "+ yytext());
    //System.out.println("Token COMA encontrado, Lexema "+ yytext());
    return new Symbol(sym.COMA, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 67: break;
          case 21: 
            { lista.add("Token PUNTO, encontrado Lexema "+ yytext());
    //System.out.println("Token PUNTO encontrado, Lexema "+ yytext());
    return new Symbol(sym.PUNTO, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 68: break;
          case 22: 
            { //System.out.println("Token CONST_DOU, encontrado Lexema "+ yytext()); 
    if((Double.parseDouble(yytext()) >= 0) && (Double.parseDouble(yytext()) <= 2147483647.0))
    {
        agregarATablaDeSimbolos("CONST_DOU", yytext());
        lista.add("Token CONST_DOU, encontrado Lexema "+ yytext());
        return new Symbol(sym.CONST_DOU, yycolumn + 1, yyline + 1, yytext());
    } else {
        throw new Exception("Constante real fuera de rango: |" + yytext() + "|" );
    }
            } 
            // fall through
          case 69: break;
          case 23: 
            { lista.add("Token OP_DECLARACION, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_DECLARACION encontrado, Lexema: "+ yytext());
    return new Symbol(sym.OP_DECLARACION, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 70: break;
          case 24: 
            { lista.add("Token OP_IGUAL, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_IGUAL encontrado, Lexema "+ yytext());
    return new Symbol(sym.OP_IGUAL, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 71: break;
          case 25: 
            { lista.add("Token OP_MENOR_IGUAL, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_MENOR_IGUAL encontrado, Lexema "+ yytext());
    return new Symbol(sym.OP_MENOR_IGUAL, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 72: break;
          case 26: 
            { lista.add("Token OP_MAYOR_IGUAL, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_MAYOR_IGUAL encontrado, Lexema "+ yytext());
    return new Symbol(sym.OP_MAYOR_IGUAL, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 73: break;
          case 27: 
            { lista.add("Token OP_DISTINTO, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_DISTINTO encontrado, Lexema "+ yytext());
    return new Symbol(sym.OP_DISTINTO, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 74: break;
          case 28: 
            { lista.add("Token OP_OR, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_OR encontrado, Lexema "+ yytext());
    return new Symbol(sym.OP_OR, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 75: break;
          case 29: 
            { //System.out.println("Token IF, encontrado Lexema "+ yytext());
    lista.add("Token IF, encontrado Lexema "+ yytext()); 
    return new Symbol(sym.IF, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 76: break;
          case 30: 
            { //System.out.println("Token CONST_STR, encontrado Lexema "+ yytext());
    if(yytext().length() <= 30 )
    {
        agregarATablaDeSimbolos("CONST_STR", yytext());
        lista.add("Token CONST_STR, encontrado Lexema "+ yytext());
        return new Symbol(sym.CONST_STR, yycolumn + 1, yyline + 1, yytext());
    } else {
        throw new Exception("Constante string fuera de rango: |" + yytext() + "|" );
    }
            } 
            // fall through
          case 77: break;
          case 31: 
            { lista.add("Token OP_ASIGNACION, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_ASIGNACION encontrado, Lexema: "+ yytext());
    return new Symbol(sym.OP_ASIGNACION, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 78: break;
          case 32: 
            { lista.add("Token OP_AND, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_AND encontrado, Lexema "+ yytext());
    return new Symbol(sym.OP_AND, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 79: break;
          case 33: 
            { lista.add("Token OP_NOT, encontrado Lexema "+ yytext());
    //System.out.println("Token OP_NOT encontrado, Lexema "+ yytext());
    return new Symbol(sym.OP_NOT, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 80: break;
          case 34: 
            { //System.out.println("Token CONST_BIN, encontrado Lexema "+ yytext()); 
    agregarATablaDeSimbolos("CONST_BIN", yytext());
    lista.add("Token CONST_BIN, encontrado Lexema "+ yytext()); 
    return new Symbol(sym.CONST_BIN, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 81: break;
          case 35: 
            { //System.out.println("Token THEN, encontrado Lexema "+ yytext());
    lista.add("Token THEN, encontrado Lexema "+ yytext()); 
    return new Symbol(sym.THEN, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 82: break;
          case 36: 
            { //System.out.println("Token ELSE, encontrado Lexema "+ yytext());
    lista.add("Token ELSE, encontrado Lexema "+ yytext()); 
    return new Symbol(sym.ELSE, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 83: break;
          case 37: 
            { //System.out.println("Token WRITE, encontrado Lexema "+ yytext());
    lista.add("Token WRITE, encontrado Lexema "+ yytext()); 
    return new Symbol(sym.WRITE, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 84: break;
          case 38: 
            { //System.out.println("Token WHILE, encontrado Lexema "+ yytext());
    lista.add("Token WHILE, encontrado Lexema "+ yytext()); 
    return new Symbol(sym.WHILE, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 85: break;
          case 39: 
            { //System.out.println("Token ENDIF, encontrado Lexema "+ yytext());
    lista.add("Token ENDIF, encontrado Lexema "+ yytext()); 
    return new Symbol(sym.ENDIF, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 86: break;
          case 40: 
            { //System.out.println("Token FLOAT, encontrado Lexema "+ yytext()); 
    lista.add("Token FLOAT, encontrado Lexema "+ yytext()); 
    return new Symbol(sym.FLOAT, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 87: break;
          case 41: 
            { //System.out.println("Token STRING, encontrado Lexema "+ yytext());
    lista.add("Token STRING, encontrado Lexema "+ yytext()); 
    return new Symbol(sym.STRING, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 88: break;
          case 42: 
            { //System.out.println("Token INTEGER, encontrado Lexema "+ yytext()); 
    lista.add("Token INTEGER, encontrado Lexema "+ yytext()); 
    return new Symbol(sym.INTEGER, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 89: break;
          case 43: 
            { //System.out.println("Token CONTAR_PRIMOS, encontrado Lexema "+ yytext());
    lista.add("Token CONTAR_PRIMOS, encontrado Lexema "+ yytext());
    return new Symbol(sym.CONTAR_PRIMOS, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 90: break;
          case 44: 
            { //System.out.println("Token DECLARE, encontrado Lexema "+ yytext());
    lista.add("Token DECLARE, encontrado Lexema "+ yytext());
    return new Symbol(sym.DECLARE, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 91: break;
          case 45: 
            { //System.out.println("Token PROGRAM_SECTION, encontrado Lexema "+ yytext());
    lista.add("Token PROGRAM_SECTION, encontrado Lexema "+ yytext());
    return new Symbol(sym.PROGRAM, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 92: break;
          case 46: 
            { //System.out.println("Token ENDDECLARE, encontrado Lexema "+ yytext());
    lista.add("Token ENDDECLARE, encontrado Lexema "+ yytext()); 
    return new Symbol(sym.ENDDECLARE, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 93: break;
          case 47: 
            { //System.out.println("Token ENDPROGRAM_SECTION, encontrado Lexema "+ yytext());
    lista.add("Token ENDPROGRAM_SECTION, encontrado Lexema "+ yytext());
    return new Symbol(sym.ENDPROGRAM, yycolumn + 1, yyline + 1, yytext());
            } 
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
