/* The following code was generated by JFlex 1.7.0 */

package app;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>./Lexico.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\3\1\0\2\3\22\0\1\3\1\16\3\0\1\12\1\0"+
    "\1\52\1\33\1\34\1\5\1\10\1\42\1\11\1\43\1\4\1\53"+
    "\1\55\10\2\1\6\1\41\1\14\1\7\1\15\2\0\1\17\1\1"+
    "\1\70\1\21\1\46\1\62\1\56\1\66\1\45\2\1\1\63\1\73"+
    "\1\20\1\25\1\72\1\1\1\26\1\60\1\31\2\1\1\44\3\1"+
    "\1\37\1\0\1\40\1\13\2\0\1\22\1\54\1\71\1\24\1\51"+
    "\1\64\1\57\1\67\1\50\2\1\1\65\1\75\1\23\1\27\1\74"+
    "\1\1\1\30\1\61\1\32\2\1\1\47\3\1\1\35\1\0\1\36"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\1\13\1\14\1\15\1\1"+
    "\12\2\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\6\2\1\1\1\3\10\2\1\27\2\0"+
    "\1\30\1\31\1\32\1\33\1\34\2\2\1\35\4\2"+
    "\1\36\10\2\1\37\4\2\1\0\1\40\1\0\11\2"+
    "\1\0\1\41\1\42\1\43\16\2\1\44\11\2\1\0"+
    "\2\2\1\45\10\2\1\46\13\2\1\0\2\2\1\47"+
    "\1\50\10\2\1\51\5\2\1\4\10\2\1\52\7\2"+
    "\1\53\10\2\2\0\6\2\4\0\6\2\4\0\6\2"+
    "\10\0\2\2\10\0\1\54\22\0\1\55\4\0\1\56"+
    "\10\0\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\76\0\u0174"+
    "\0\u01b2\0\76\0\76\0\76\0\76\0\u01f0\0\u022e\0\u026c"+
    "\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c"+
    "\0\u049a\0\u04d8\0\76\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\76\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c"+
    "\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c"+
    "\0\u087a\0\u08b8\0\u08f6\0\u0516\0\u0934\0\u0972\0\76\0\76"+
    "\0\76\0\76\0\76\0\u09b0\0\u09ee\0\174\0\u0a2c\0\u0a6a"+
    "\0\u0aa8\0\u0ae6\0\174\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c"+
    "\0\u0c5a\0\u0c98\0\u0cd6\0\174\0\u0d14\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u06c8\0\76\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\76\0\174\0\174"+
    "\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268"+
    "\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u0e0c\0\u141a"+
    "\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a"+
    "\0\u1648\0\u1686\0\u16c4\0\174\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\u17fa\0\u1838\0\u1876\0\u18b4\0\174\0\u18f2\0\u1930\0\u196e"+
    "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\174\0\174\0\u1c56\0\u1c94\0\u1cd2"+
    "\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\174\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\u1f3e\0\76\0\u1f7c\0\u1fba\0\u1ff8\0\u2036"+
    "\0\u2074\0\u20b2\0\u20f0\0\u212e\0\174\0\u216c\0\u21aa\0\u21e8"+
    "\0\u2226\0\u2264\0\u22a2\0\u22e0\0\174\0\u231e\0\u235c\0\u239a"+
    "\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a"+
    "\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a"+
    "\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a"+
    "\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a"+
    "\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a"+
    "\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a"+
    "\0\u2f78\0\u2fb6\0\u2ff4\0\174\0\u3032\0\u3070\0\u30ae\0\u30ec"+
    "\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc"+
    "\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\76\0\u348e"+
    "\0\u34cc\0\u350a\0\u3548\0\76\0\u3586\0\u35c4\0\u3602\0\u3640"+
    "\0\u367e\0\u36bc\0\u36fa\0\u3738\0\76\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\3\1\30"+
    "\1\3\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\3\1\4\2\3\1\54"+
    "\1\55\1\56\1\3\1\57\3\3\1\60\1\61\1\62"+
    "\1\3\1\63\1\3\77\0\2\3\14\0\14\3\11\0"+
    "\6\3\1\0\23\3\2\0\1\4\40\0\1\64\7\0"+
    "\1\4\1\0\1\4\23\0\1\5\76\0\1\65\77\0"+
    "\1\66\1\67\75\0\1\70\75\0\1\71\75\0\1\72"+
    "\75\0\1\73\67\0\2\3\14\0\1\3\1\74\12\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\14\0\6\3"+
    "\1\75\5\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\14\0\6\3\1\76\1\3\1\76\3\3\11\0\2\3"+
    "\1\77\3\3\1\0\23\3\1\0\2\3\14\0\4\3"+
    "\1\100\7\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\14\0\10\3\1\101\3\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\14\0\10\3\1\76\3\3\11\0\5\3"+
    "\1\102\1\0\23\3\1\0\2\3\14\0\7\3\1\103"+
    "\4\3\11\0\6\3\1\0\23\3\1\0\2\3\14\0"+
    "\11\3\1\103\2\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\14\0\14\3\11\0\6\3\1\0\13\3\1\104"+
    "\1\105\6\3\1\0\2\3\14\0\14\3\11\0\6\3"+
    "\1\0\14\3\1\105\6\3\2\0\1\64\50\0\1\64"+
    "\1\0\1\64\21\0\2\3\14\0\7\3\1\106\1\3"+
    "\1\107\2\3\11\0\6\3\1\0\13\3\1\110\1\111"+
    "\6\3\1\0\2\3\14\0\1\3\1\112\2\3\1\113"+
    "\7\3\11\0\6\3\1\0\7\3\1\114\1\3\1\114"+
    "\11\3\1\0\2\3\14\0\1\3\1\115\12\3\11\0"+
    "\6\3\1\0\10\3\1\116\1\3\1\117\10\3\1\0"+
    "\2\3\14\0\11\3\1\107\2\3\11\0\6\3\1\0"+
    "\14\3\1\111\6\3\1\0\2\3\14\0\4\3\1\113"+
    "\7\3\11\0\6\3\1\0\11\3\1\114\11\3\1\0"+
    "\2\3\14\0\4\3\1\120\7\3\11\0\6\3\1\0"+
    "\12\3\1\117\10\3\1\0\3\121\13\0\14\121\11\0"+
    "\6\121\1\122\23\121\2\0\1\4\40\0\1\64\7\0"+
    "\1\4\1\123\1\4\21\0\2\3\14\0\12\3\1\124"+
    "\1\125\11\0\6\3\1\0\23\3\1\0\2\3\14\0"+
    "\13\3\1\125\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\14\0\14\3\11\0\6\3\1\0\10\3\1\126\1\3"+
    "\1\127\10\3\1\0\2\3\14\0\14\3\11\0\6\3"+
    "\1\0\12\3\1\127\10\3\1\0\2\3\14\0\6\3"+
    "\1\130\1\3\1\131\3\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\14\0\10\3\1\132\3\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\14\0\7\3\1\133\4\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\14\0\11\3"+
    "\1\134\2\3\11\0\6\3\1\0\23\3\5\0\1\135"+
    "\77\0\1\136\67\0\2\3\14\0\2\3\1\137\11\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\14\0\12\3"+
    "\1\140\1\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\14\0\14\3\11\0\6\3\1\0\15\3\1\141\5\3"+
    "\1\0\2\3\14\0\5\3\1\137\6\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\14\0\13\3\1\140\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\14\0\14\3\11\0"+
    "\6\3\1\0\16\3\1\142\4\3\1\0\2\3\14\0"+
    "\14\3\11\0\2\3\1\143\3\3\1\0\23\3\1\0"+
    "\2\3\14\0\14\3\11\0\5\3\1\144\1\0\23\3"+
    "\1\0\2\3\14\0\14\3\11\0\1\3\1\145\4\3"+
    "\1\0\23\3\1\0\2\3\14\0\14\3\11\0\4\3"+
    "\1\146\1\3\1\0\23\3\1\0\2\3\14\0\14\3"+
    "\11\0\1\3\1\147\4\3\1\0\23\3\1\0\2\3"+
    "\14\0\14\3\11\0\4\3\1\150\1\3\1\0\23\3"+
    "\1\0\2\3\14\0\12\3\1\151\1\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\14\0\13\3\1\152\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\14\0\2\3\1\153"+
    "\11\3\11\0\6\3\1\0\23\3\1\0\2\3\14\0"+
    "\14\3\11\0\6\3\1\0\5\3\1\154\15\3\1\0"+
    "\2\3\14\0\14\3\11\0\6\3\1\0\6\3\1\155"+
    "\14\3\1\0\2\3\14\0\5\3\1\156\6\3\11\0"+
    "\6\3\1\0\23\3\53\0\1\157\1\0\1\157\21\0"+
    "\2\3\14\0\7\3\1\160\4\3\11\0\6\3\1\0"+
    "\23\3\1\0\2\3\14\0\11\3\1\161\2\3\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\14\0\6\3\1\162"+
    "\5\3\11\0\6\3\1\0\23\3\1\0\2\3\14\0"+
    "\10\3\1\163\3\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\14\0\1\3\1\164\12\3\11\0\6\3\1\0"+
    "\23\3\1\0\2\3\14\0\4\3\1\165\7\3\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\14\0\4\3\1\166"+
    "\7\3\11\0\6\3\1\0\23\3\1\0\2\3\14\0"+
    "\6\3\1\167\5\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\14\0\10\3\1\170\3\3\11\0\6\3\1\0"+
    "\23\3\5\135\1\171\70\135\1\0\2\3\14\0\14\3"+
    "\11\0\6\3\1\0\10\3\1\172\12\3\1\0\2\3"+
    "\14\0\14\3\11\0\6\3\1\0\12\3\1\173\10\3"+
    "\1\0\2\3\14\0\1\3\1\174\12\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\14\0\4\3\1\174\7\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\14\0\12\3"+
    "\1\175\1\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\14\0\13\3\1\176\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\14\0\14\3\11\0\6\3\1\0\10\3\1\177"+
    "\12\3\1\0\2\3\14\0\14\3\11\0\6\3\1\0"+
    "\12\3\1\200\10\3\1\0\2\3\14\0\14\3\11\0"+
    "\2\3\1\201\3\3\1\0\23\3\1\0\2\3\14\0"+
    "\14\3\11\0\5\3\1\202\1\0\23\3\1\0\2\3"+
    "\14\0\2\3\1\203\11\3\11\0\6\3\1\0\17\3"+
    "\1\204\3\3\1\0\2\3\14\0\14\3\11\0\2\3"+
    "\1\205\3\3\1\0\23\3\1\0\2\3\14\0\14\3"+
    "\11\0\5\3\1\205\1\0\23\3\1\0\2\3\14\0"+
    "\5\3\1\206\6\3\11\0\6\3\1\0\21\3\1\207"+
    "\1\3\1\0\2\3\14\0\14\3\11\0\1\3\1\210"+
    "\4\3\1\0\23\3\1\0\2\3\14\0\14\3\11\0"+
    "\4\3\1\211\1\3\1\0\23\3\1\0\2\3\14\0"+
    "\1\212\13\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\14\0\3\3\1\213\10\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\14\0\12\3\1\214\1\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\14\0\13\3\1\215\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\14\0\13\3\1\216"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\14\0\14\3"+
    "\11\0\6\3\1\0\3\3\1\217\17\3\1\0\2\3"+
    "\14\0\14\3\11\0\6\3\1\0\4\3\1\220\16\3"+
    "\4\135\1\221\1\171\70\135\1\0\2\3\14\0\1\222"+
    "\13\3\11\0\6\3\1\0\23\3\1\0\2\3\14\0"+
    "\3\3\1\223\10\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\14\0\14\3\11\0\2\3\1\224\3\3\1\0"+
    "\23\3\1\0\2\3\14\0\14\3\11\0\5\3\1\224"+
    "\1\0\23\3\1\0\2\3\14\0\14\3\11\0\2\3"+
    "\1\225\3\3\1\0\23\3\1\0\2\3\14\0\14\3"+
    "\11\0\5\3\1\225\1\0\23\3\1\0\2\3\14\0"+
    "\14\3\11\0\6\3\1\0\3\3\1\226\17\3\1\0"+
    "\2\3\14\0\14\3\11\0\6\3\1\0\4\3\1\227"+
    "\16\3\1\0\2\3\14\0\14\3\11\0\2\3\1\230"+
    "\3\3\1\0\23\3\1\0\2\3\14\0\7\3\1\231"+
    "\4\3\11\0\6\3\1\0\23\3\1\0\2\3\14\0"+
    "\14\3\11\0\5\3\1\232\1\0\23\3\1\0\2\3"+
    "\14\0\11\3\1\233\2\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\14\0\1\3\1\234\12\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\14\0\4\3\1\235\7\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\14\0\12\3"+
    "\1\236\1\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\14\0\13\3\1\236\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\14\0\1\237\13\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\14\0\3\3\1\240\10\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\14\0\3\3\1\241\10\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\14\0\7\3"+
    "\1\242\4\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\14\0\11\3\1\243\2\3\11\0\6\3\1\0\23\3"+
    "\4\135\1\244\1\171\70\135\1\0\2\3\14\0\7\3"+
    "\1\245\4\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\14\0\11\3\1\246\2\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\14\0\14\3\11\0\2\3\1\247\3\3"+
    "\1\0\23\3\1\0\2\3\14\0\14\3\11\0\5\3"+
    "\1\250\1\0\23\3\1\0\2\3\14\0\14\3\11\0"+
    "\6\3\1\0\15\3\1\251\5\3\1\0\2\3\14\0"+
    "\6\3\1\252\5\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\14\0\14\3\11\0\6\3\1\0\16\3\1\253"+
    "\4\3\1\0\2\3\14\0\10\3\1\254\3\3\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\14\0\14\3\11\0"+
    "\6\3\1\0\3\3\1\255\17\3\1\0\2\3\14\0"+
    "\14\3\11\0\6\3\1\0\4\3\1\255\16\3\1\0"+
    "\2\3\14\0\7\3\1\256\4\3\11\0\6\3\1\0"+
    "\23\3\1\0\2\3\14\0\11\3\1\257\2\3\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\14\0\11\3\1\260"+
    "\2\3\11\0\6\3\1\0\23\3\1\0\2\3\14\0"+
    "\1\261\13\3\11\0\6\3\1\0\23\3\1\0\2\3"+
    "\14\0\3\3\1\262\10\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\14\0\14\3\11\0\2\3\1\263\3\3"+
    "\1\0\23\3\1\0\2\3\14\0\14\3\11\0\5\3"+
    "\1\264\1\0\23\3\1\0\2\3\14\0\7\3\1\265"+
    "\4\3\11\0\6\3\1\0\23\3\1\0\2\3\14\0"+
    "\11\3\1\265\2\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\14\0\14\3\11\0\6\3\1\0\10\3\1\266"+
    "\12\3\1\0\2\3\14\0\14\3\11\0\6\3\1\0"+
    "\3\3\1\267\17\3\1\0\2\3\14\0\14\3\11\0"+
    "\6\3\1\0\12\3\1\270\10\3\1\0\2\3\14\0"+
    "\14\3\11\0\6\3\1\0\4\3\1\271\16\3\1\0"+
    "\2\3\14\0\14\3\11\0\6\3\1\0\17\3\1\272"+
    "\3\3\1\0\2\3\14\0\14\3\11\0\6\3\1\0"+
    "\17\3\1\273\3\3\1\0\2\3\14\0\14\3\11\0"+
    "\6\3\1\0\17\3\1\273\1\3\1\273\1\3\1\0"+
    "\2\3\14\0\14\3\11\0\6\3\1\0\20\3\1\274"+
    "\2\3\1\0\2\3\14\0\14\3\11\0\6\3\1\0"+
    "\22\3\1\275\1\0\2\3\14\0\14\3\10\0\1\276"+
    "\6\3\1\0\23\3\1\0\2\3\14\0\14\3\10\0"+
    "\1\277\6\3\1\0\23\3\1\0\2\3\14\0\1\300"+
    "\13\3\11\0\6\3\1\0\23\3\1\0\2\3\14\0"+
    "\7\3\1\301\4\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\14\0\3\3\1\302\10\3\11\0\6\3\1\0"+
    "\23\3\1\0\2\3\14\0\11\3\1\303\2\3\11\0"+
    "\6\3\1\0\23\3\1\0\2\3\14\0\7\3\1\304"+
    "\4\3\11\0\6\3\1\0\23\3\1\0\2\3\14\0"+
    "\11\3\1\305\2\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\14\0\14\3\10\0\1\306\6\3\1\0\23\3"+
    "\1\0\2\3\14\0\14\3\10\0\1\307\6\3\1\0"+
    "\23\3\60\0\1\310\76\0\1\311\15\0\2\3\14\0"+
    "\7\3\1\312\4\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\14\0\1\313\13\3\11\0\6\3\1\0\23\3"+
    "\1\0\2\3\14\0\11\3\1\314\2\3\11\0\6\3"+
    "\1\0\23\3\1\0\2\3\14\0\3\3\1\315\10\3"+
    "\11\0\6\3\1\0\23\3\1\0\2\3\14\0\14\3"+
    "\11\0\1\3\1\316\4\3\1\0\23\3\1\0\2\3"+
    "\14\0\14\3\11\0\4\3\1\317\1\3\1\0\23\3"+
    "\60\0\1\320\76\0\1\321\62\0\1\322\100\0\1\323"+
    "\25\0\2\3\14\0\14\3\11\0\2\3\1\324\3\3"+
    "\1\0\23\3\1\0\2\3\14\0\14\3\11\0\6\3"+
    "\1\0\20\3\1\325\2\3\1\0\2\3\14\0\14\3"+
    "\11\0\5\3\1\326\1\0\23\3\1\0\2\3\14\0"+
    "\14\3\11\0\6\3\1\0\22\3\1\327\1\0\2\3"+
    "\14\0\14\3\11\0\6\3\1\0\20\3\1\330\2\3"+
    "\1\0\2\3\14\0\14\3\11\0\6\3\1\0\22\3"+
    "\1\331\46\0\1\332\100\0\1\333\114\0\1\334\76\0"+
    "\1\335\5\0\2\3\14\0\14\3\10\0\1\336\6\3"+
    "\1\0\23\3\1\0\2\3\14\0\14\3\10\0\1\337"+
    "\6\3\1\0\23\3\1\0\2\3\14\0\14\3\10\0"+
    "\1\340\6\3\1\0\23\3\1\0\2\3\14\0\14\3"+
    "\10\0\1\341\6\3\1\0\23\3\1\0\2\3\14\0"+
    "\6\3\1\342\5\3\11\0\6\3\1\0\23\3\1\0"+
    "\2\3\14\0\10\3\1\343\3\3\11\0\6\3\1\0"+
    "\23\3\70\0\1\344\76\0\1\345\35\0\1\346\76\0"+
    "\1\347\123\0\1\350\75\0\1\351\76\0\1\352\75\0"+
    "\1\353\15\0\2\3\14\0\14\3\11\0\6\3\1\0"+
    "\5\3\1\354\15\3\1\0\2\3\14\0\14\3\11\0"+
    "\6\3\1\0\6\3\1\354\14\3\31\0\1\355\76\0"+
    "\1\356\110\0\1\357\100\0\1\360\73\0\1\361\75\0"+
    "\1\362\100\0\1\363\75\0\1\364\71\0\1\365\100\0"+
    "\1\366\52\0\1\367\77\0\1\370\136\0\1\371\75\0"+
    "\1\372\76\0\1\373\75\0\1\374\31\0\1\375\77\0"+
    "\1\376\66\0\1\377\100\0\1\377\103\0\1\u0100\75\0"+
    "\1\u0101\76\0\1\u0102\75\0\1\u0103\63\0\1\u0104\100\0"+
    "\1\u0104\117\0\1\u0105\75\0\1\u0106\100\0\1\u0107\75\0"+
    "\1\u0108\52\0\1\u0109\75\0\1\u010a\77\0\1\u010b\75\0"+
    "\1\u010c\66\0\1\u010d\75\0\1\u010e\100\0\1\u010d\75\0"+
    "\1\u010e\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14198];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\4\11\15\1\10\11"+
    "\22\1\2\0\5\11\25\1\1\0\1\11\1\0\11\1"+
    "\1\0\1\11\32\1\1\0\27\1\1\0\22\1\1\11"+
    "\31\1\2\0\6\1\4\0\6\1\4\0\6\1\10\0"+
    "\2\1\10\0\1\1\22\0\1\11\4\0\1\11\10\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private ArrayList<String> lista = new ArrayList<>();
    private ArrayList<SymbolTableEntry> tsEntries = new ArrayList<>();
    private PrintWriter writer = null;

    public Lexico(java.io.Reader in, String filePath) {
        this.zzReader = in;
        try {
            File file = new File(filePath);
            file.createNewFile();
            writer = new PrintWriter(new FileWriter(filePath));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public ArrayList getList() {
        return this.lista;
    }

    public void vaciarLista() {
        this.lista.clear();
    }

    public void agregarATablaDeSimbolos(String token, String valor) {
        boolean existe = false;
        for (SymbolTableEntry entrada : tsEntries) {
            if (entrada.getToken().equals(token) && ((entrada.getNombre().equals(valor)) || (entrada.getNombre().equals("_" + valor)))) {
                existe = true;
            }
        }

        if (!existe) tsEntries.add(new SymbolTableEntry(valor, token));
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
        if (writer != null) {
    	String header = String.format("%-25s | %-15s | %-10s | %-25s |%-5s", "NOMBRE", "TOKEN", "TIPO", "VALOR", "LONGITUD");
    	writer.println(header);
    	for(SymbolTableEntry entryInstance: tsEntries) {
    		String entry = entryInstance.getEntry();
    		writer.println(entry);
    	}
        
        writer.close();
    }
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
 * @throws Exception 
   */
  public java_cup.runtime.Symbol next_token() throws Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return null; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Caracter no permitido: <" + yytext() + "> en la linea " + yyline);
            } 
            // fall through
          case 49: break;
          case 2: 
            { lista.add("Token ID, encontrado Lexema "+ yytext());
    System.out.println("Token ID, encontrado Lexema "+ yytext()); 
    agregarATablaDeSimbolos("ID", yytext());
            } 
            // fall through
          case 50: break;
          case 3: 
            { System.out.println("Token CONST_INTEGER, encontrado Lexema "+ yytext());
    if((Integer.parseInt(yytext()) >= 0) && (Integer.parseInt(yytext()) <= 65536))
    {
        agregarATablaDeSimbolos("CONST_INTEGER", yytext());
        lista.add("Token CONST_INTEGER, encontrado Lexema "+ yytext());
    } else {
        throw new Exception("Constante integer fuera de rango: |" + yytext() + "|" );
    }
            } 
            // fall through
          case 51: break;
          case 4: 
            { /* no se realiza accion por lo tanto se ignoran*/
            } 
            // fall through
          case 52: break;
          case 5: 
            { lista.add("Token OP_DIVISION, encontrado Lexema "+ yytext());
    System.out.println("Token OP_DIVISION encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 53: break;
          case 6: 
            { lista.add("Token OP_MULTIPLICACION, encontrado Lexema "+ yytext());
    System.out.println("Token OP_MULTIPLICACION encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 54: break;
          case 7: 
            { lista.add("Token DOS_PUNTOS, encontrado Lexema "+ yytext());
    System.out.println("Token DOS_PUNTOS encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 55: break;
          case 8: 
            { lista.add("Token OP_SUMA, encontrado Lexema "+ yytext());
    System.out.println("Token OP_SUMA encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 56: break;
          case 9: 
            { lista.add("Token OP_RESTA, encontrado Lexema "+ yytext());
    System.out.println("Token OP_RESTA encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 57: break;
          case 10: 
            { lista.add("Token OP_MODULO, encontrado Lexema "+ yytext());
    System.out.println("Token OP_MODULO encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 58: break;
          case 11: 
            { lista.add("Token OP_POTENCIA, encontrado Lexema "+ yytext());
    System.out.println("Token OP_POTENCIA encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 59: break;
          case 12: 
            { lista.add("Token OP_MENOR, encontrado Lexema "+ yytext());
    System.out.println("Token OP_MENOR encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 60: break;
          case 13: 
            { lista.add("Token OP_MAYOR, encontrado Lexema "+ yytext());
    System.out.println("Token OP_MAYOR encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 61: break;
          case 14: 
            { lista.add("Token PARENTESIS_ABRE, encontrado Lexema "+ yytext());
    System.out.println("Token PARENTESIS_ABRE encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 62: break;
          case 15: 
            { lista.add("Token PARENTESIS_CIERRA, encontrado Lexema "+ yytext());
    System.out.println("Token PARENTESIS_CIERRA encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 63: break;
          case 16: 
            { lista.add("Token LLAVE_ABRE, encontrado Lexema "+ yytext());
    System.out.println("Token LLAVE_ABRE encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 64: break;
          case 17: 
            { lista.add("Token LLAVE_CIERRA, encontrado Lexema "+ yytext());
    System.out.println("Token LLAVE_CIERRA encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 65: break;
          case 18: 
            { lista.add("Token CORCHETE_ABRE, encontrado Lexema "+ yytext());
    System.out.println("Token CORCHETE_ABRE encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 66: break;
          case 19: 
            { lista.add("Token CORCHETE_CIERRA, encontrado Lexema "+ yytext());
    System.out.println("Token CORCHETE_CIERRA encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 67: break;
          case 20: 
            { lista.add("Token PUNTO_COMA, encontrado Lexema "+ yytext());
    System.out.println("Token PUNTO_COMA encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 68: break;
          case 21: 
            { lista.add("Token COMA, encontrado Lexema "+ yytext());
    System.out.println("Token COMA encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 69: break;
          case 22: 
            { lista.add("Token PUNTO, encontrado Lexema "+ yytext());
    System.out.println("Token PUNTO encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 70: break;
          case 23: 
            { System.out.println("Token CONST_DOU, encontrado Lexema "+ yytext()); 
    if((Double.parseDouble(yytext()) >= 0) && (Double.parseDouble(yytext()) <= 2147483647.0))
    {
        agregarATablaDeSimbolos("CONST_DOU", yytext());
        lista.add("Token CONST_DOU, encontrado Lexema "+ yytext());
    } else {
        throw new Exception("Constante real fuera de rango: |" + yytext() + "|" );
    }
            } 
            // fall through
          case 71: break;
          case 24: 
            { lista.add("Token OP_DECLARACION, encontrado Lexema "+ yytext());
    System.out.println("Token OP_DECLARACION encontrado, Lexema: "+ yytext());
            } 
            // fall through
          case 72: break;
          case 25: 
            { lista.add("Token OP_IGUAL, encontrado Lexema "+ yytext());
    System.out.println("Token OP_IGUAL encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 73: break;
          case 26: 
            { lista.add("Token OP_MENOR_IGUAL, encontrado Lexema "+ yytext());
    System.out.println("Token OP_MENOR_IGUAL encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 74: break;
          case 27: 
            { lista.add("Token OP_MAYOR_IGUAL, encontrado Lexema "+ yytext());
    System.out.println("Token OP_MAYOR_IGUAL encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 75: break;
          case 28: 
            { lista.add("Token OP_DISTINTO, encontrado Lexema "+ yytext());
    System.out.println("Token OP_DISTINTO encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 76: break;
          case 29: 
            { System.out.println("Token DO, encontrado Lexema "+ yytext());
    lista.add("Token DO, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 77: break;
          case 30: 
            { lista.add("Token OP_OR, encontrado Lexema "+ yytext());
    System.out.println("Token OP_OR encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 78: break;
          case 31: 
            { System.out.println("Token IF, encontrado Lexema "+ yytext());
    lista.add("Token IF, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 79: break;
          case 32: 
            { System.out.println("Token CONST_STR, encontrado Lexema "+ yytext());
    if(yytext().length() <= 30 )
    {
        agregarATablaDeSimbolos("CONST_STR", yytext());
        lista.add("Token CONST_STR, encontrado Lexema "+ yytext());
    } else {
        throw new Exception("Constante string fuera de rango: |" + yytext() + "|" );
    }
            } 
            // fall through
          case 80: break;
          case 33: 
            { lista.add("Token OP_ASIGNACION, encontrado Lexema "+ yytext());
    System.out.println("Token OP_ASIGNACION encontrado, Lexema: "+ yytext());
            } 
            // fall through
          case 81: break;
          case 34: 
            { lista.add("Token OP_AND, encontrado Lexema "+ yytext());
    System.out.println("Token OP_AND encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 82: break;
          case 35: 
            { lista.add("Token OP_NOT, encontrado Lexema "+ yytext());
    System.out.println("Token OP_NOT encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 83: break;
          case 36: 
            { System.out.println("Token CONST_BIN, encontrado Lexema "+ yytext()); 
    agregarATablaDeSimbolos("CONST_BIN", yytext());
    lista.add("Token CONST_BIN, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 84: break;
          case 37: 
            { System.out.println("Token THEN, encontrado Lexema "+ yytext());
    lista.add("Token THEN, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 85: break;
          case 38: 
            { System.out.println("Token ELSE, encontrado Lexema "+ yytext());
    lista.add("Token ELSE, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 86: break;
          case 39: 
            { System.out.println("Token WRITE, encontrado Lexema "+ yytext());
    lista.add("Token WRITE, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 87: break;
          case 40: 
            { System.out.println("Token WHILE, encontrado Lexema "+ yytext());
    lista.add("Token WHILE, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 88: break;
          case 41: 
            { System.out.println("Token FLOAT, encontrado Lexema "+ yytext()); 
    lista.add("Token FLOAT, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 89: break;
          case 42: 
            { System.out.println("Token STRING, encontrado Lexema "+ yytext());
    lista.add("Token STRING, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 90: break;
          case 43: 
            { System.out.println("Token INTEGER, encontrado Lexema "+ yytext()); 
    lista.add("Token INTEGER, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 91: break;
          case 44: 
            { System.out.println("Token CONTAR_PRIMOS, encontrado Lexema "+ yytext());
    lista.add("Token CONTAR_PRIMOS, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 92: break;
          case 45: 
            { System.out.println("Token DECLARE, encontrado Lexema "+ yytext());
    lista.add("Token DECLARE, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 93: break;
          case 46: 
            { System.out.println("Token PROGRAM_SECTION, encontrado Lexema "+ yytext());
    lista.add("Token PROGRAM_SECTION, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 94: break;
          case 47: 
            { System.out.println("Token ENDDECLARE, encontrado Lexema "+ yytext());
    lista.add("Token ENDDECLARE, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 95: break;
          case 48: 
            { System.out.println("Token ENDPROGRAM_SECTION, encontrado Lexema "+ yytext());
    lista.add("Token ENDPROGRAM_SECTION, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
