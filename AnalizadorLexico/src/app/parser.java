
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package app;

import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;
import nodos.NodoAsignacion;
import nodos.NodoCiclo;
import nodos.NodoComparacion;
import nodos.NodoConstante;
import nodos.NodoDivision;
import nodos.NodoExpresion;
import nodos.NodoExpresionBooleana;
import nodos.NodoIdentificador;
import nodos.NodoIf;
import nodos.NodoMultiplicacion;
import nodos.NodoPrograma;
import nodos.NodoResta;
import nodos.NodoSentencia;
import nodos.NodoSuma;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\017\005\000\002\022\004" +
    "\000\002\022\003\000\002\020\005\000\002\023\007\000" +
    "\002\023\007\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\003\005\000\002\025\004\000\002\026" +
    "\004\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\011\005\000" +
    "\002\011\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\007\005\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\015\007\000\002\014\011\000\002\012\003\000\002" +
    "\012\005\000\002\012\005\000\002\013\007\000\002\013" +
    "\004\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\030\004\000\002\030\004\000\002\031\010\000\002" +
    "\016\003\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\006\046\005\050\011\001\002\000\004\050" +
    "\011\001\002\000\004\026\114\001\002\000\004\002\113" +
    "\001\002\000\006\002\ufffe\045\111\001\002\000\004\002" +
    "\000\001\002\000\010\040\017\041\020\053\012\001\002" +
    "\000\004\004\105\001\002\000\016\040\uffed\041\uffed\043" +
    "\uffed\044\uffed\051\uffed\053\uffed\001\002\000\016\040\uffee" +
    "\041\uffee\043\uffee\044\uffee\051\uffee\053\uffee\001\002\000" +
    "\012\040\017\041\020\051\104\053\012\001\002\000\016" +
    "\040\ufff0\041\ufff0\043\ufff0\044\ufff0\051\ufff0\053\ufff0\001" +
    "\002\000\006\021\022\022\025\001\002\000\006\021\022" +
    "\022\025\001\002\000\016\040\uffef\041\uffef\043\uffef\044" +
    "\uffef\051\uffef\053\uffef\001\002\000\006\021\022\022\025" +
    "\001\002\000\012\017\073\020\074\024\uffdc\042\uffdc\001" +
    "\002\000\004\042\065\001\002\000\016\022\031\052\032" +
    "\053\035\055\034\056\027\057\026\001\002\000\036\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\023\uffe1\027\uffe1\031\uffe1" +
    "\040\uffe1\041\uffe1\043\uffe1\044\uffe1\051\uffe1\053\uffe1\060" +
    "\uffe1\001\002\000\036\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\023\uffe2\027\uffe2\031\uffe2\040\uffe2\041\uffe2\043\uffe2\044" +
    "\uffe2\051\uffe2\053\uffe2\060\uffe2\001\002\000\036\006\uffe8" +
    "\007\uffe8\010\046\011\047\023\uffe8\027\uffe8\031\uffe8\040" +
    "\uffe8\041\uffe8\043\uffe8\044\uffe8\051\uffe8\053\uffe8\060\uffe8" +
    "\001\002\000\016\022\031\052\032\053\035\055\034\056" +
    "\027\057\026\001\002\000\004\022\053\001\002\000\010" +
    "\006\040\007\041\060\042\001\002\000\036\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\023\uffe0\027\uffe0\031\uffe0\040\uffe0" +
    "\041\uffe0\043\uffe0\044\uffe0\051\uffe0\053\uffe0\060\uffe0\001" +
    "\002\000\036\006\uffe3\007\uffe3\010\uffe3\011\uffe3\023\uffe3" +
    "\027\uffe3\031\uffe3\040\uffe3\041\uffe3\043\uffe3\044\uffe3\051" +
    "\uffe3\053\uffe3\060\uffe3\001\002\000\036\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\023\uffe5\027\uffe5\031\uffe5\040\uffe5\041" +
    "\uffe5\043\uffe5\044\uffe5\051\uffe5\053\uffe5\060\uffe5\001\002" +
    "\000\036\006\uffdf\007\uffdf\010\uffdf\011\uffdf\023\uffdf\027" +
    "\uffdf\031\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf\051\uffdf" +
    "\053\uffdf\060\uffdf\001\002\000\016\022\031\052\032\053" +
    "\035\055\034\056\027\057\026\001\002\000\016\022\031" +
    "\052\032\053\035\055\034\056\027\057\026\001\002\000" +
    "\016\022\031\052\032\053\035\055\034\056\027\057\026" +
    "\001\002\000\010\006\040\007\041\023\044\001\002\000" +
    "\012\017\uffd9\020\uffd9\024\uffd9\042\uffd9\001\002\000\036" +
    "\006\uffe9\007\uffe9\010\046\011\047\023\uffe9\027\uffe9\031" +
    "\uffe9\040\uffe9\041\uffe9\043\uffe9\044\uffe9\051\uffe9\053\uffe9" +
    "\060\uffe9\001\002\000\016\022\031\052\032\053\035\055" +
    "\034\056\027\057\026\001\002\000\016\022\031\052\032" +
    "\053\035\055\034\056\027\057\026\001\002\000\036\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\023\uffe7\027\uffe7\031\uffe7" +
    "\040\uffe7\041\uffe7\043\uffe7\044\uffe7\051\uffe7\053\uffe7\060" +
    "\uffe7\001\002\000\036\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\023\uffe6\027\uffe6\031\uffe6\040\uffe6\041\uffe6\043\uffe6\044" +
    "\uffe6\051\uffe6\053\uffe6\060\uffe6\001\002\000\036\006\uffea" +
    "\007\uffea\010\046\011\047\023\uffea\027\uffea\031\uffea\040" +
    "\uffea\041\uffea\043\uffea\044\uffea\051\uffea\053\uffea\060\uffea" +
    "\001\002\000\004\026\054\001\002\000\016\022\031\052" +
    "\032\053\035\055\034\056\027\057\026\001\002\000\012" +
    "\006\040\007\041\027\uffce\031\061\001\002\000\004\027" +
    "\057\001\002\000\004\023\060\001\002\000\036\006\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\023\uffcf\027\uffcf\031\uffcf\040" +
    "\uffcf\041\uffcf\043\uffcf\044\uffcf\051\uffcf\053\uffcf\060\uffcf" +
    "\001\002\000\016\022\031\052\032\053\035\055\034\056" +
    "\027\057\026\001\002\000\004\027\uffcd\001\002\000\010" +
    "\006\040\007\041\023\064\001\002\000\036\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\023\uffe4\027\uffe4\031\uffe4\040\uffe4" +
    "\041\uffe4\043\uffe4\044\uffe4\051\uffe4\053\uffe4\060\uffe4\001" +
    "\002\000\010\040\017\041\020\053\012\001\002\000\012" +
    "\040\017\041\020\043\067\053\012\001\002\000\010\040" +
    "\017\041\020\053\012\001\002\000\016\040\ufff1\041\ufff1" +
    "\043\ufff1\044\ufff1\051\ufff1\053\ufff1\001\002\000\012\040" +
    "\017\041\020\044\072\053\012\001\002\000\016\040\uffdd" +
    "\041\uffdd\043\uffdd\044\uffdd\051\uffdd\053\uffdd\001\002\000" +
    "\006\021\022\022\025\001\002\000\006\021\022\022\025" +
    "\001\002\000\006\024\uffda\042\uffda\001\002\000\006\024" +
    "\uffdb\042\uffdb\001\002\000\012\017\uffd8\020\uffd8\024\uffd8" +
    "\042\uffd8\001\002\000\004\024\101\001\002\000\002\001" +
    "\002\000\004\025\103\001\002\000\016\040\uffde\041\uffde" +
    "\043\uffde\044\uffde\051\uffde\053\uffde\001\002\000\004\002" +
    "\ufff4\001\002\000\020\022\031\052\032\053\035\054\107" +
    "\055\034\056\027\057\026\001\002\000\022\006\040\007" +
    "\041\040\uffec\041\uffec\043\uffec\044\uffec\051\uffec\053\uffec" +
    "\001\002\000\016\040\uffeb\041\uffeb\043\uffeb\044\uffeb\051" +
    "\uffeb\053\uffeb\001\002\000\006\002\ufff3\045\ufff3\001\002" +
    "\000\004\054\112\001\002\000\006\002\ufff2\045\ufff2\001" +
    "\002\000\004\002\001\001\002\000\004\053\121\001\002" +
    "\000\006\026\114\047\117\001\002\000\006\026\ufffb\047" +
    "\ufffb\001\002\000\004\050\ufffd\001\002\000\006\026\ufffc" +
    "\047\ufffc\001\002\000\006\027\125\031\124\001\002\000" +
    "\004\027\123\001\002\000\006\026\ufffa\047\ufffa\001\002" +
    "\000\004\053\121\001\002\000\004\005\126\001\002\000" +
    "\004\026\127\001\002\000\010\035\130\036\131\037\133" +
    "\001\002\000\006\027\ufff7\031\ufff7\001\002\000\006\027" +
    "\ufff6\031\ufff6\001\002\000\006\027\ufff8\031\ufff8\001\002" +
    "\000\006\027\ufff5\031\ufff5\001\002\000\004\031\135\001" +
    "\002\000\010\035\130\036\131\037\133\001\002\000\006" +
    "\027\ufff9\031\ufff9\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\012\002\005\003\007\017\003\025\006\001" +
    "\001\000\004\003\136\001\001\000\006\020\115\022\114" +
    "\001\001\000\002\001\001\000\004\026\107\001\001\000" +
    "\002\001\001\000\014\004\014\005\015\011\020\014\012" +
    "\015\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\067\011\020\014\012\015\013" +
    "\001\001\000\002\001\001\000\006\012\077\013\022\001" +
    "\001\000\006\012\023\013\022\001\001\000\002\001\001" +
    "\000\004\013\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\032\007\027\010\035\031\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\062\007\027\010\035\031\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\051" +
    "\010\035\031\036\001\001\000\010\007\044\010\035\031" +
    "\036\001\001\000\012\006\042\007\027\010\035\031\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\050\031\036\001\001\000\006\010\047" +
    "\031\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\054\007\027" +
    "\010\035\016\055\031\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\054\007\027\010\035\016\061\031\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\065\005\015\011\020\014\012\015\013\001\001\000" +
    "\012\005\067\011\020\014\012\015\013\001\001\000\014" +
    "\004\070\005\015\011\020\014\012\015\013\001\001\000" +
    "\002\001\001\000\012\005\067\011\020\014\012\015\013" +
    "\001\001\000\002\001\001\000\004\013\075\001\001\000" +
    "\004\013\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\105\007\027\010\035\031\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\121\001\001\000\004\020\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\135\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  
    private List<String> reglas = new ArrayList<String>();
    private static List<SymbolTableEntry> ts = new ArrayList<SymbolTableEntry>();

    private static String errorMsg;

    public parser(java_cup.runtime.Scanner s, ArrayList<SymbolTableEntry> table) {
        super(s);
        parser.ts = table;
    }

    // Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s){
        errorMsg = "Error en la linea " + (s.right - 1) + ". "
            + s + " no reconocido. valor " + s.value;
    }

    public List<String> getList() {
        return this.reglas;
    }

    public static List<SymbolTableEntry> getTS() {
        return ts;
    }

    public static String getErrorMsg() {
        return errorMsg;
    }

    public void agregarTipo(Object id, Object type) {
        for (SymbolTableEntry entrada : ts) {
            if (entrada.getToken().equals("ID") && entrada.getNombre().equals(id)) {
                entrada.tipo = (String) type;
            }
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  public String resultado = "";
  public List<NodoSentencia> a ;
  public int contadorPrimos = 0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoPrograma start_val = (NodoPrograma)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= miprograma 
            {
              NodoPrograma RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoPrograma s = (NodoPrograma)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    reglas.add("Regla N°-1: programa -> miprograma");
    RESULT = s;
    System.out.println("Programa sin declaraciones");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= declaraciones miprograma 
            {
              NodoPrograma RESULT =null;
		 reglas.add("Regla N°0: programa -> declaraciones miprograma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= miprog 
            {
              NodoPrograma RESULT =null;
		 reglas.add("Regla N°1: programa -> miprog "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= DECLARE declaracion ENDDECLARE 
            {
              Object RESULT =null;
		 reglas.add("Regla N°2: declaraciones -> DECLARE declaracion ENDDECLARE "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= declaracion asignacion_tipos 
            {
              Object RESULT =null;
		 reglas.add("Regla N°3: declaracion ->  declaracion asignacion_tipos "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= asignacion_tipos 
            {
              Object RESULT =null;
		 reglas.add("Regla N°4: declaracion -> asignacion_tipos "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // asignacion_tipos ::= CORCHETE_ABRE lista CORCHETE_CIERRA 
            {
              Object RESULT =null;
		 reglas.add("Regla N°5: asignacion_tipos ->  CORCHETE_ABRE lista CORCHETE_CIERRA "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_tipos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista ::= ID COMA lista COMA tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    reglas.add("Regla N°6: lista -> ID COMA lista COMA tipo ");
    RESULT = id;
    agregarTipo(id,type);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista ::= ID CORCHETE_CIERRA OP_DECLARACION CORCHETE_ABRE tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  reglas.add("Regla N°7: lista -> ID CORCHETE_CIERRA OP_DECLARACION CORCHETE_ABRE tipo ");
  RESULT = id;
  agregarTipo(id,type);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  reglas.add("Regla N°8: tipo -> INTEGER");
  RESULT = integer;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  reglas.add("Regla N°9: tipo -> STRING");
  RESULT = string;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object flotante = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  reglas.add("Regla N°10: tipo -> FLOAT");
  RESULT = flotante;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // miprograma ::= PROGRAM sentencias ENDPROGRAM 
            {
              NodoPrograma RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> s = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    reglas.add("Regla N°11: miprograma -> PROGRAM sentencia ENDPROGRAM");
    RESULT = new NodoPrograma(s);
    System.out.println("Comienzo de programa");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("miprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // miprog ::= miprog sentWrite 
            {
              Object RESULT =null;
		 reglas.add("Regla N°12: miprog -> miprog sentWrite"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("miprog",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentWrite ::= WRITE CONST_STR 
            {
              Object RESULT =null;
		 reglas.add("Regla N°13: sentWrite -> WRITE CONST_STR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentWrite",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencias ::= sentencias sentencia 
            {
              List<NodoSentencia> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> ss = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia s = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ss.add(s);
                  RESULT = ss;
                  System.out.println("sentencias sentencia");
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencias ::= sentencia 
            {
              List<NodoSentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia s = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a = new ArrayList<NodoSentencia>();
                            a.add(s);
                            RESULT = a;
                            System.out.println("sentencia");

               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= asignacion 
            {
              NodoSentencia RESULT =null;
		int sasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoAsignacion sas = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add("Regla N°15: sentencia -> asignacion");
         RESULT = sas;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= iteracion 
            {
              NodoSentencia RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCiclo sif = (NodoCiclo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add("Regla N°16: sentencia -> iteracion");
         RESULT = sif; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= seleccion 
            {
              NodoSentencia RESULT =null;
		int sicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoIf sic = (NodoIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sic; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacion ::= ID OP_ASIGNACION expresion 
            {
              NodoAsignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT= new NodoAsignacion(new NodoIdentificador(id), e); System.out.println("ID::=E");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion ::= ID OP_ASIGNACION CONST_STR 
            {
              NodoAsignacion RESULT =null;
		 reglas.add("Regla N°23: asignacion -> ID OP_ASIGNACION CONST_STR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= expresion OP_SUMA termino 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = new NodoSuma(a,b);
    System.out.println("E + T");
    reglas.add("Regla N°24: expresion -> expresion OP_SUMA termino");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= expresion OP_RESTA termino 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = new NodoResta(a,b);
    System.out.println("E - T");
    reglas.add("Regla N°25: expresion -> expresion OP_RESTA termino"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= termino 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = a;
    System.out.println("E es T");
    reglas.add("Regla N°26: expresion -> termino ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // termino ::= termino OP_MULTIPLICACION factor 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new NodoMultiplicacion(a, b);
    reglas.add("Regla N°27: termino -> termino OP_MULTIPLICACION factor ");
    System.out.println("T = T*F");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // termino ::= termino OP_DIVISION factor 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = new NodoDivision(a, b);
    System.out.println("T = T/F");
    reglas.add("Regla N°28: termino -> termino OP_DIVISION factor ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // termino ::= factor 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = a;
    System.out.println("T es F");
    reglas.add("Regla N°29: termino -> factor ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
            {
              NodoExpresion RESULT =null;
		 reglas.add("Regla N°30: factor -> PARENTESIS_ABRE expresion PARENTESIS_CIERRA "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= ID 
            {
              NodoExpresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    reglas.add("Regla N°31: factor -> ID");
    RESULT = new NodoIdentificador(id);
    System.out.println("ID");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= CONST_DOU 
            {
              NodoExpresion RESULT =null;
		reglas.add("Regla N°32: factor -> CONST_DOU"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // factor ::= CONST_BIN 
            {
              NodoExpresion RESULT =null;
		 reglas.add("Regla N°33: factor -> CONST_BIN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // factor ::= CONST_INTEGER 
            {
              NodoExpresion RESULT =null;
		int cteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cte = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    reglas.add("Regla N°34: factor -> CONST_INTEGER");
    RESULT =new NodoConstante(Integer.parseInt(cte));
    System.out.println("cte");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= funcioncontarprimos 
            {
              NodoExpresion RESULT =null;
		 reglas.add("Regla N°35: factor -> funcioncontarprimos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // iteracion ::= WHILE condicion LLAVE_ABRE codigo LLAVE_CIERRA 
            {
              NodoCiclo RESULT =null;
		 reglas.add("Regla N°36: iteracion -> WHILE condicion LLAVE_ABRE codigo LLAVE_CIERRA "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // seleccion ::= IF condicion THEN sentencias ELSE sentencias ENDIF 
            {
              NodoIf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoExpresionBooleana c = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<NodoSentencia> st = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> se = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    reglas.add("Regla N°38: seleccion -> IF condicion THEN sentencias ELSE sentencias ENDIF");
    RESULT= new NodoIf(c, st, se);
    System.out.println("IF c THEN st ELSE se ENDIF");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= comparacion 
            {
              NodoExpresionBooleana RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresionBooleana c = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    reglas.add("Regla N°39: condicion -> comparacion");
    RESULT = c;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= comparacion OP_AND comparacion 
            {
              NodoExpresionBooleana RESULT =null;
		
    reglas.add("Regla N°40: condicion -> comparacion OP_AND comparacion");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicion ::= comparacion OP_OR comparacion 
            {
              NodoExpresionBooleana RESULT =null;
		 
    reglas.add("Regla N°41: condicion -> comparacion OP_OR comparacion");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparacion ::= PARENTESIS_ABRE expresion OP_IGUAL expresion PARENTESIS_CIERRA 
            {
              NodoExpresionBooleana RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoExpresion e1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresion e2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
  reglas.add("Regla N°42: comparacion -> PARENTESIS_ABRE  expresion == expresion PARENTESIS_CIERRA "); 
  RESULT = new NodoComparacion(c, e1, e2); 
  System.out.println("E1 == E2");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparacion ::= OP_NOT comparacion 
            {
              NodoExpresionBooleana RESULT =null;
		 reglas.add("Regla N°43: comparacion -> OP_NOT comparacion  "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparador ::= OP_MENOR 
            {
              Object RESULT =null;
		 reglas.add("Regla N°44: comparador -> OP_MENOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparador ::= OP_MAYOR 
            {
              Object RESULT =null;
		 reglas.add("Regla N°45: comparador -> OP_MAYOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparador ::= OP_MAYOR_IGUAL 
            {
              Object RESULT =null;
		 reglas.add("Regla N°46: comparador -> OP_MAYOR_IGUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparador ::= OP_MENOR_IGUAL 
            {
              Object RESULT =null;
		 reglas.add("Regla N°47: comparador -> OP_MENOR_IGUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparador ::= OP_IGUAL 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  reglas.add("Regla N°48: comparador -> OP_IGUAL");
  //RESULT = op;
  System.out.println("==");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparador ::= OP_DISTINTO 
            {
              Object RESULT =null;
		 reglas.add("Regla N°49: comparador -> OP_DISTINTO "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // salida ::= WRITE ID 
            {
              Object RESULT =null;
		 reglas.add("Regla N°50: salida -> WRITE ID"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // salida ::= WRITE CONST_STR 
            {
              Object RESULT =null;
		 reglas.add("Regla N°51: salida -> WRITE CONST_STR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // funcioncontarprimos ::= CONTAR_PRIMOS PARENTESIS_ABRE CORCHETE_ABRE parametros CORCHETE_CIERRA PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 reglas.add("Regla N°52: funcioncontarprimos ->  CONTAR_PRIMOS PARENTESIS_ABRE CORCHETE_ABRE parametros CORCHETE_CIERRA PARENTESIS_CIERRA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcioncontarprimos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros ::= expresion 
            {
              NodoExpresion RESULT =null;
		 reglas.add("Regla N°53: parametros -> expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros ::= expresion COMA parametros 
            {
              NodoExpresion RESULT =null;
		 reglas.add("Regla N°54: parametros -> expresion COMA parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
