
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package app;

import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;
import nodos.NodoAsignacion;
import nodos.NodoCiclo;
import nodos.NodoConstante;
import nodos.NodoDivision;
import nodos.NodoExpresion;
import nodos.NodoExpresionBooleana;
import nodos.NodoIdentificador;
import nodos.NodoIf;
import nodos.NodoMultiplicacion;
import nodos.NodoPrograma;
import nodos.NodoResta;
import nodos.NodoSentencia;
import nodos.NodoSuma;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\017\005\000\002\022\004" +
    "\000\002\022\003\000\002\020\005\000\002\023\007\000" +
    "\002\023\007\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\003\005\000\002\025\004\000\002\026" +
    "\004\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\011\005\000" +
    "\002\011\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\007\005\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\015\007\000\002\014\007\000\002\014\010\000\002" +
    "\012\003\000\002\012\005\000\002\012\005\000\002\013" +
    "\007\000\002\013\004\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\030\004\000\002\030\004\000\002" +
    "\031\010\000\002\016\003\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\006\047\005\051\011\001\002\000\004\051" +
    "\011\001\002\000\004\027\122\001\002\000\004\002\121" +
    "\001\002\000\006\002\ufffe\046\117\001\002\000\004\002" +
    "\000\001\002\000\010\041\017\042\020\054\012\001\002" +
    "\000\004\004\113\001\002\000\012\041\uffed\042\uffed\052" +
    "\uffed\054\uffed\001\002\000\012\041\uffee\042\uffee\052\uffee" +
    "\054\uffee\001\002\000\012\041\017\042\020\052\112\054" +
    "\012\001\002\000\012\041\ufff0\042\ufff0\052\ufff0\054\ufff0" +
    "\001\002\000\006\022\022\023\025\001\002\000\006\022" +
    "\022\023\025\001\002\000\012\041\uffef\042\uffef\052\uffef" +
    "\054\uffef\001\002\000\006\022\022\023\025\001\002\000" +
    "\012\020\100\021\101\025\uffdb\043\uffdb\001\002\000\004" +
    "\043\073\001\002\000\016\023\031\053\032\054\035\056" +
    "\034\057\027\060\026\001\002\000\044\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\024\uffe1\030\uffe1\032\uffe1\041\uffe1\042\uffe1" +
    "\052\uffe1\054\uffe1\001\002\000\044\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\024\uffe2\030\uffe2\032\uffe2\041\uffe2\042\uffe2\052" +
    "\uffe2\054\uffe2\001\002\000\044\006\uffe8\007\uffe8\010\054" +
    "\011\055\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\024\uffe8\030\uffe8\032\uffe8\041\uffe8\042\uffe8\052\uffe8" +
    "\054\uffe8\001\002\000\016\023\031\053\032\054\035\056" +
    "\034\057\027\060\026\001\002\000\004\023\061\001\002" +
    "\000\022\006\043\007\042\012\045\013\050\014\047\015" +
    "\046\016\040\017\041\001\002\000\044\006\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\024\uffe0\030\uffe0\032\uffe0\041\uffe0\042\uffe0" +
    "\052\uffe0\054\uffe0\001\002\000\044\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\024\uffe3\030\uffe3\032\uffe3\041\uffe3\042\uffe3\052" +
    "\uffe3\054\uffe3\001\002\000\044\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\024\uffe5\030\uffe5\032\uffe5\041\uffe5\042\uffe5\052\uffe5" +
    "\054\uffe5\001\002\000\044\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\024\uffdf\030\uffdf\032\uffdf\041\uffdf\042\uffdf\052\uffdf\054" +
    "\uffdf\001\002\000\016\023\uffd2\053\uffd2\054\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\001\002\000\016\023\uffd1\053\uffd1\054" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\001\002\000\016\023\031" +
    "\053\032\054\035\056\034\057\027\060\026\001\002\000" +
    "\016\023\031\053\032\054\035\056\034\057\027\060\026" +
    "\001\002\000\016\023\031\053\032\054\035\056\034\057" +
    "\027\060\026\001\002\000\016\023\uffd6\053\uffd6\054\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\001\002\000\016\023\uffd3\053" +
    "\uffd3\054\uffd3\056\uffd3\057\uffd3\060\uffd3\001\002\000\016" +
    "\023\uffd4\053\uffd4\054\uffd4\056\uffd4\057\uffd4\060\uffd4\001" +
    "\002\000\016\023\uffd5\053\uffd5\054\uffd5\056\uffd5\057\uffd5" +
    "\060\uffd5\001\002\000\010\006\043\007\042\024\052\001" +
    "\002\000\012\020\uffd8\021\uffd8\025\uffd8\043\uffd8\001\002" +
    "\000\044\006\uffea\007\uffea\010\054\011\055\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\024\uffea\030\uffea" +
    "\032\uffea\041\uffea\042\uffea\052\uffea\054\uffea\001\002\000" +
    "\016\023\031\053\032\054\035\056\034\057\027\060\026" +
    "\001\002\000\016\023\031\053\032\054\035\056\034\057" +
    "\027\060\026\001\002\000\044\006\uffe7\007\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\024\uffe7\030\uffe7\032\uffe7\041\uffe7\042\uffe7\052\uffe7" +
    "\054\uffe7\001\002\000\044\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\024\uffe6\030\uffe6\032\uffe6\041\uffe6\042\uffe6\052\uffe6\054" +
    "\uffe6\001\002\000\044\006\uffe9\007\uffe9\010\054\011\055" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\024" +
    "\uffe9\030\uffe9\032\uffe9\041\uffe9\042\uffe9\052\uffe9\054\uffe9" +
    "\001\002\000\004\027\062\001\002\000\016\023\031\053" +
    "\032\054\035\056\034\057\027\060\026\001\002\000\012" +
    "\006\043\007\042\030\uffcd\032\067\001\002\000\004\030" +
    "\065\001\002\000\004\024\066\001\002\000\044\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\024\uffce\030\uffce\032\uffce\041\uffce" +
    "\042\uffce\052\uffce\054\uffce\001\002\000\016\023\031\053" +
    "\032\054\035\056\034\057\027\060\026\001\002\000\004" +
    "\030\uffcc\001\002\000\010\006\043\007\042\024\072\001" +
    "\002\000\044\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\024\uffe4\030" +
    "\uffe4\032\uffe4\041\uffe4\042\uffe4\052\uffe4\054\uffe4\001\002" +
    "\000\002\001\002\000\006\044\075\045\076\001\002\000" +
    "\004\045\077\001\002\000\012\041\uffdd\042\uffdd\052\uffdd" +
    "\054\uffdd\001\002\000\012\041\uffdc\042\uffdc\052\uffdc\054" +
    "\uffdc\001\002\000\006\022\022\023\025\001\002\000\006" +
    "\022\022\023\025\001\002\000\006\025\uffd9\043\uffd9\001" +
    "\002\000\006\025\uffda\043\uffda\001\002\000\012\020\uffd7" +
    "\021\uffd7\025\uffd7\043\uffd7\001\002\000\004\025\106\001" +
    "\002\000\002\001\002\000\004\026\110\001\002\000\012" +
    "\041\uffde\042\uffde\052\uffde\054\uffde\001\002\000\012\041" +
    "\ufff1\042\ufff1\052\ufff1\054\ufff1\001\002\000\004\002\ufff4" +
    "\001\002\000\020\023\031\053\032\054\035\055\115\056" +
    "\034\057\027\060\026\001\002\000\016\006\043\007\042" +
    "\041\uffec\042\uffec\052\uffec\054\uffec\001\002\000\012\041" +
    "\uffeb\042\uffeb\052\uffeb\054\uffeb\001\002\000\006\002\ufff3" +
    "\046\ufff3\001\002\000\004\055\120\001\002\000\006\002" +
    "\ufff2\046\ufff2\001\002\000\004\002\001\001\002\000\004" +
    "\054\127\001\002\000\006\027\122\050\125\001\002\000" +
    "\006\027\ufffb\050\ufffb\001\002\000\004\051\ufffd\001\002" +
    "\000\006\027\ufffc\050\ufffc\001\002\000\006\030\133\032" +
    "\132\001\002\000\004\030\131\001\002\000\006\027\ufffa" +
    "\050\ufffa\001\002\000\004\054\127\001\002\000\004\005" +
    "\134\001\002\000\004\027\135\001\002\000\010\036\136" +
    "\037\137\040\141\001\002\000\006\030\ufff7\032\ufff7\001" +
    "\002\000\006\030\ufff6\032\ufff6\001\002\000\006\030\ufff8" +
    "\032\ufff8\001\002\000\006\030\ufff5\032\ufff5\001\002\000" +
    "\004\032\143\001\002\000\010\036\136\037\137\040\141" +
    "\001\002\000\006\030\ufff9\032\ufff9\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\012\002\005\003\007\017\003\025\006\001" +
    "\001\000\004\003\144\001\001\000\006\020\123\022\122" +
    "\001\001\000\002\001\001\000\004\026\115\001\001\000" +
    "\002\001\001\000\014\004\014\005\015\011\020\014\012" +
    "\015\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\110\011\020\014\012\015\013" +
    "\001\001\000\002\001\001\000\006\012\104\013\022\001" +
    "\001\000\006\012\023\013\022\001\001\000\002\001\001" +
    "\000\004\013\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\032\007\027\010\035\031\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\070\007\027\010\035\031\036\001\001\000\002" +
    "\001\001\000\004\027\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\057\010\035\031" +
    "\036\001\001\000\010\007\052\010\035\031\036\001\001" +
    "\000\012\006\050\007\027\010\035\031\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\056\031\036\001\001\000\006\010\055" +
    "\031\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\062\007\027" +
    "\010\035\016\063\031\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\062\007\027\010\035\016\067\031\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\102\001\001" +
    "\000\004\013\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\113\007\027\010\035" +
    "\031\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\127\001\001\000\004\020\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\143\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  
    private List<String> reglas = new ArrayList<String>();
    private static List<SymbolTableEntry> ts = new ArrayList<SymbolTableEntry>();

    private static String errorMsg;

    public parser(java_cup.runtime.Scanner s, ArrayList<SymbolTableEntry> table) {
        super(s);
        parser.ts = table;
    }

    // Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s){
        errorMsg = "Error en la linea " + (s.right - 1) + ". "
            + s + " no reconocido. valor " + s.value;
    }

    public List<String> getList() {
        return this.reglas;
    }

    public static List<SymbolTableEntry> getTS() {
        return ts;
    }

    public static String getErrorMsg() {
        return errorMsg;
    }

    public void agregarTipo(Object id, Object type) {
        for (SymbolTableEntry entrada : ts) {
            if (entrada.getToken().equals("ID") && entrada.getNombre().equals(id)) {
                entrada.tipo = (String) type;
            }
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  public String resultado = "";
  public List<NodoSentencia> a ;
  public int contadorPrimos = 0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoPrograma start_val = (NodoPrograma)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= miprograma 
            {
              NodoPrograma RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoPrograma s = (NodoPrograma)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    reglas.add("Regla N°-1: programa -> miprograma");
    RESULT = s;
    System.out.println("Programa sin declaraciones");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= declaraciones miprograma 
            {
              NodoPrograma RESULT =null;
		 reglas.add("Regla N°0: programa -> declaraciones miprograma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= miprog 
            {
              NodoPrograma RESULT =null;
		 reglas.add("Regla N°1: programa -> miprog "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= DECLARE declaracion ENDDECLARE 
            {
              Object RESULT =null;
		 reglas.add("Regla N°2: declaraciones -> DECLARE declaracion ENDDECLARE "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= declaracion asignacion_tipos 
            {
              Object RESULT =null;
		 reglas.add("Regla N°3: declaracion ->  declaracion asignacion_tipos "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= asignacion_tipos 
            {
              Object RESULT =null;
		 reglas.add("Regla N°4: declaracion -> asignacion_tipos "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // asignacion_tipos ::= CORCHETE_ABRE lista CORCHETE_CIERRA 
            {
              Object RESULT =null;
		 reglas.add("Regla N°5: asignacion_tipos ->  CORCHETE_ABRE lista CORCHETE_CIERRA "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_tipos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista ::= ID COMA lista COMA tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    reglas.add("Regla N°6: lista -> ID COMA lista COMA tipo ");
    RESULT = id;
    agregarTipo(id,type);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista ::= ID CORCHETE_CIERRA OP_DECLARACION CORCHETE_ABRE tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  reglas.add("Regla N°7: lista -> ID CORCHETE_CIERRA OP_DECLARACION CORCHETE_ABRE tipo ");
  RESULT = id;
  agregarTipo(id,type);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  reglas.add("Regla N°8: tipo -> INTEGER");
  RESULT = integer;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  reglas.add("Regla N°9: tipo -> STRING");
  RESULT = string;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object flotante = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  reglas.add("Regla N°10: tipo -> FLOAT");
  RESULT = flotante;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // miprograma ::= PROGRAM sentencias ENDPROGRAM 
            {
              NodoPrograma RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> s = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    reglas.add("Regla N°11: miprograma -> PROGRAM sentencia ENDPROGRAM");
    RESULT = new NodoPrograma(s);
    System.out.println("Comienzo de programa");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("miprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // miprog ::= miprog sentWrite 
            {
              Object RESULT =null;
		 reglas.add("Regla N°12: miprog -> miprog sentWrite"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("miprog",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentWrite ::= WRITE CONST_STR 
            {
              Object RESULT =null;
		 reglas.add("Regla N°13: sentWrite -> WRITE CONST_STR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentWrite",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencias ::= sentencias sentencia 
            {
              List<NodoSentencia> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> ss = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia s = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ss.add(s);
                  RESULT = ss;
                  System.out.println("sentencias sentencia");
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencias ::= sentencia 
            {
              List<NodoSentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia s = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a = new ArrayList<NodoSentencia>();
                            a.add(s);
                            RESULT = a;
                            System.out.println("sentencia");

               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= asignacion 
            {
              NodoSentencia RESULT =null;
		int sasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoAsignacion sas = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add("Regla N°15: sentencia -> asignacion");
         RESULT = sas;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= iteracion 
            {
              NodoSentencia RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCiclo sif = (NodoCiclo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sif; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= seleccion 
            {
              NodoSentencia RESULT =null;
		int sicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoIf sic = (NodoIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sic; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacion ::= ID OP_ASIGNACION expresion 
            {
              NodoAsignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT= new NodoAsignacion(new NodoIdentificador(id), e); System.out.println("ID::=E");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion ::= ID OP_ASIGNACION CONST_STR 
            {
              NodoAsignacion RESULT =null;
		 reglas.add("Regla N°23: asignacion -> ID OP_ASIGNACION CONST_STR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= expresion OP_SUMA termino 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = new NodoSuma(a,b);
    System.out.println("E + T");
    reglas.add("Regla N°24: expresion -> expresion OP_SUMA termino");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= expresion OP_RESTA termino 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = new NodoResta(a,b);
    System.out.println("E - T");
    reglas.add("Regla N°25: expresion -> expresion OP_RESTA termino"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= termino 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = a;
    System.out.println("E es T");
    reglas.add("Regla N°26: expresion -> termino ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // termino ::= termino OP_MULTIPLICACION factor 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new NodoMultiplicacion(a, b);
    reglas.add("Regla N°27: termino -> termino OP_MULTIPLICACION factor ");
    System.out.println("T = T*F");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // termino ::= termino OP_DIVISION factor 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = new NodoDivision(a, b);
    System.out.println("T = T/F");
    reglas.add("Regla N°28: termino -> termino OP_DIVISION factor ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // termino ::= factor 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = a;
    System.out.println("T es F");
    reglas.add("Regla N°29: termino -> factor ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
            {
              NodoExpresion RESULT =null;
		 reglas.add("Regla N°30: factor -> PARENTESIS_ABRE expresion PARENTESIS_CIERRA "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= ID 
            {
              NodoExpresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    reglas.add("Regla N°31: factor -> ID");
    RESULT = new NodoIdentificador(id);
    System.out.println("ID");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= CONST_DOU 
            {
              NodoExpresion RESULT =null;
		reglas.add("Regla N°32: factor -> CONST_DOU"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // factor ::= CONST_BIN 
            {
              NodoExpresion RESULT =null;
		 reglas.add("Regla N°33: factor -> CONST_BIN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // factor ::= CONST_INTEGER 
            {
              NodoExpresion RESULT =null;
		int cteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cte = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    reglas.add("Regla N°34: factor -> CONST_INTEGER");
    RESULT =new NodoConstante(Integer.parseInt(cte));
    System.out.println("cte");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= funcioncontarprimos 
            {
              NodoExpresion RESULT =null;
		 reglas.add("Regla N°35: factor -> funcioncontarprimos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // iteracion ::= WHILE condicion LLAVE_ABRE codigo LLAVE_CIERRA 
            {
              NodoCiclo RESULT =null;
		 reglas.add("Regla N°36: iteracion -> WHILE condicion LLAVE_ABRE codigo LLAVE_CIERRA "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // seleccion ::= IF condicion THEN codigo ENDIF 
            {
              NodoIf RESULT =null;
		 reglas.add("Regla N°37: seleccion -> IF condicion THEN codigo ENDIF "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // seleccion ::= IF condicion THEN codigo ELSE ENDIF 
            {
              NodoIf RESULT =null;
		 reglas.add("Regla N°38: seleccion -> IF condicion THEN codigo ELSE ENDIF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= comparacion 
            {
              NodoExpresionBooleana RESULT =null;
		 reglas.add("Regla N°39: condicion -> comparacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicion ::= comparacion OP_AND comparacion 
            {
              NodoExpresionBooleana RESULT =null;
		 reglas.add("Regla N°40: condicion -> comparacion OP_AND comparacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicion ::= comparacion OP_OR comparacion 
            {
              NodoExpresionBooleana RESULT =null;
		 reglas.add("Regla N°41: condicion -> comparacion OP_OR comparacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparacion ::= PARENTESIS_ABRE expresion comparador expresion PARENTESIS_CIERRA 
            {
              NodoExpresionBooleana RESULT =null;
		 reglas.add("Regla N°42: comparacion -> PARENTESIS_ABRE  expresion comparador expresion PARENTESIS_CIERRA "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparacion ::= OP_NOT comparacion 
            {
              NodoExpresionBooleana RESULT =null;
		 reglas.add("Regla N°43: comparacion -> OP_NOT comparacion  "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparador ::= OP_MENOR 
            {
              Object RESULT =null;
		 reglas.add("Regla N°44: comparador -> OP_MENOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparador ::= OP_MAYOR 
            {
              Object RESULT =null;
		 reglas.add("Regla N°45: comparador -> OP_MAYOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparador ::= OP_MAYOR_IGUAL 
            {
              Object RESULT =null;
		 reglas.add("Regla N°46: comparador -> OP_MAYOR_IGUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparador ::= OP_MENOR_IGUAL 
            {
              Object RESULT =null;
		 reglas.add("Regla N°47: comparador -> OP_MENOR_IGUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparador ::= OP_IGUAL 
            {
              Object RESULT =null;
		 reglas.add("Regla N°48: comparador -> OP_IGUAL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comparador ::= OP_DISTINTO 
            {
              Object RESULT =null;
		 reglas.add("Regla N°49: comparador -> OP_DISTINTO "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // salida ::= WRITE ID 
            {
              Object RESULT =null;
		 reglas.add("Regla N°50: salida -> WRITE ID"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // salida ::= WRITE CONST_STR 
            {
              Object RESULT =null;
		 reglas.add("Regla N°51: salida -> WRITE CONST_STR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funcioncontarprimos ::= CONTAR_PRIMOS PARENTESIS_ABRE CORCHETE_ABRE parametros CORCHETE_CIERRA PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		 reglas.add("Regla N°52: funcioncontarprimos ->  CONTAR_PRIMOS PARENTESIS_ABRE CORCHETE_ABRE parametros CORCHETE_CIERRA PARENTESIS_CIERRA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcioncontarprimos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros ::= expresion 
            {
              NodoExpresion RESULT =null;
		 reglas.add("Regla N°53: parametros -> expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametros ::= expresion COMA parametros 
            {
              NodoExpresion RESULT =null;
		 reglas.add("Regla N°54: parametros -> expresion COMA parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
