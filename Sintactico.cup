package app;

import nodos.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

parser code {:
  
    public ParserHelper helper = new ParserHelper((Lexico) super.getScanner());
    private List<String> reglas = new ArrayList<String>();
    private static List<SymbolTableEntry> ts = new ArrayList<SymbolTableEntry>();

    private static String errorMsg;

    public parser(java_cup.runtime.Scanner s, ArrayList<SymbolTableEntry> table) {
        super(s);
        parser.ts = table;
    }

    // Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s){
        errorMsg = "Error en la linea " + (s.right - 1) + ". "
            + s + " no reconocido. valor " + s.value;
    }

    public List<String> getList() {
        return this.reglas;
    }

    public static List<SymbolTableEntry> getTS() {
        return ts;
    }

    public static String getErrorMsg() {
        return errorMsg;
    }

    public void agregarTipo(Object id, Object type) {
        for (SymbolTableEntry entrada : ts) {
            if (entrada.getToken().equals("ID") && entrada.getNombre().equals(id)) {
                entrada.tipo = (String) type;
            }
        }
    }
:}

action code {:
  public String resultado = "";
  public List<NodoSentencia> a ;
  public int contadorPrimos = 0;
  public int i = 1;
  public int j = 0;
:}

terminal OP_ASIGNACION, OP_DECLARACION, OP_SUMA, OP_RESTA, OP_DIVISION, OP_MULTIPLICACION,OP_AND, OP_OR, OP_NOT,PARENTESIS_ABRE,  PARENTESIS_CIERRA, LLAVE_ABRE, LLAVE_CIERRA, CORCHETE_ABRE, CORCHETE_CIERRA, PUNTO_COMA, COMA, PUNTO, DOS_PUNTOS, IGUAL, INTEGER, STRING, FLOAT, WHILE, IF, THEN, ELSE, ENDIF, WRITE,DECLARE, ENDDECLARE, PROGRAM,
ENDPROGRAM, CONTAR_PRIMOS;
terminal String ID, CONST_STR, CONST_INTEGER, CONST_DOU, CONST_BIN, OP_IGUAL, OP_MAYOR,OP_MENOR, OP_MAYOR_IGUAL, OP_MENOR_IGUAL, OP_DISTINTO;

non terminal NodoPrograma programa;
non terminal NodoPrograma miprograma;
non terminal List<NodoSentencia> sentencias;
non terminal NodoSentencia sentencia;
non terminal NodoExpresion expresion, termino, factor; 
non terminal NodoAsignacion asignacion;
non terminal NodoExpresionBooleana condicion,comparacion;
non terminal NodoIf seleccion;
non terminal NodoCiclo iteracion;
non terminal List<NodoExpresion> parametros;
non terminal NodoExpresion funcioncontarprimos;

non terminal declaraciones, asignacion_tipos, codigo, declaracion, lista, tipo, miprog, sentWrite, comparador, salida;

precedence left OP_OR;
precedence left OP_AND;
precedence left OP_NOT;

start with programa;

programa ::= miprograma:s {: 
    reglas.add("Regla N°-1: programa -> miprograma");
    RESULT = s;
    System.out.println("Programa sin declaraciones");
:};
programa ::= declaraciones miprograma {: reglas.add("Regla N°0: programa -> declaraciones miprograma"); :};
programa ::= miprog {: reglas.add("Regla N°1: programa -> miprog "); :};



declaraciones ::= DECLARE declaracion ENDDECLARE {: reglas.add("Regla N°2: declaraciones -> DECLARE declaracion ENDDECLARE "); :};

declaracion ::= declaracion asignacion_tipos {: reglas.add("Regla N°3: declaracion ->  declaracion asignacion_tipos "); :};
declaracion ::= asignacion_tipos {: reglas.add("Regla N°4: declaracion -> asignacion_tipos "); :};

asignacion_tipos ::= CORCHETE_ABRE lista CORCHETE_CIERRA {: reglas.add("Regla N°5: asignacion_tipos ->  CORCHETE_ABRE lista CORCHETE_CIERRA "); :};

lista ::= ID:id COMA lista COMA tipo:type {:
    reglas.add("Regla N°6: lista -> ID COMA lista COMA tipo ");
    RESULT = id;
    agregarTipo(id,type);
:};
lista ::= ID:id CORCHETE_CIERRA OP_DECLARACION CORCHETE_ABRE tipo:type {: 
  reglas.add("Regla N°7: lista -> ID CORCHETE_CIERRA OP_DECLARACION CORCHETE_ABRE tipo ");
  RESULT = id;
  agregarTipo(id,type);
:};


tipo ::= INTEGER:integer  {: 
  reglas.add("Regla N°8: tipo -> INTEGER");
  RESULT = integer;
:};
tipo ::= STRING:string  {:
  reglas.add("Regla N°9: tipo -> STRING");
  RESULT = string;
:};
tipo ::= FLOAT:flotante   {:
  reglas.add("Regla N°10: tipo -> FLOAT");
  RESULT = flotante;
:};




miprograma ::= PROGRAM sentencias:s ENDPROGRAM {: 
    reglas.add("Regla N°11: miprograma -> PROGRAM sentencia ENDPROGRAM");
    RESULT = new NodoPrograma(s);
    System.out.println("Comienzo de programa");
:};
miprog ::= miprog sentWrite {: reglas.add("Regla N°12: miprog -> miprog sentWrite"); :};
sentWrite ::= WRITE CONST_STR {: reglas.add("Regla N°13: sentWrite -> WRITE CONST_STR"); :};


sentencias ::= sentencias:ss sentencia:s {:
                  ss.add(s);
                  RESULT = ss;
                  System.out.println("sentencias sentencia");
               :}
             | sentencia:s {:a = new ArrayList<NodoSentencia>();
                            a.add(s);
                            RESULT = a;
                            System.out.println("sentencia");

               :}
             ;

sentencia ::=  
      asignacion:sas 
      {: reglas.add("Regla N°15: sentencia -> asignacion");
         RESULT = sas;:}
    | iteracion:sif  
      {: reglas.add("Regla N°16: sentencia -> iteracion");
         RESULT = sif; :}
    | seleccion:sic  {: RESULT = sic; :}
    ;

asignacion ::= ID:id OP_ASIGNACION expresion:e {: 
    RESULT= new NodoAsignacion(new NodoIdentificador(id), e);
    System.out.println("ID::=E");:};
asignacion ::= ID:id OP_ASIGNACION CONST_STR:cs {: 
    reglas.add("Regla N°23: asignacion -> ID OP_ASIGNACION CONST_STR");
    RESULT= new NodoAsignacion(new NodoIdentificador(id),(NodoExpresion) cs);
    System.out.println("ID::=CONST_STR");:};

expresion ::= expresion:a OP_SUMA termino:b {: 
    RESULT = new NodoSuma(a,b);
    System.out.println("E + T");
    reglas.add("Regla N°24: expresion -> expresion OP_SUMA termino");
    :};
expresion ::= expresion:a OP_RESTA termino:b {: 
    RESULT = new NodoResta(a,b);
    System.out.println("E - T");
    reglas.add("Regla N°25: expresion -> expresion OP_RESTA termino"); :};
expresion ::= termino:a  {: 
    RESULT = a;
    System.out.println("E es T");
    reglas.add("Regla N°26: expresion -> termino ");:};

termino  ::= termino:a OP_MULTIPLICACION factor:b  {:
    RESULT = new NodoMultiplicacion(a, b);
    reglas.add("Regla N°27: termino -> termino OP_MULTIPLICACION factor ");
    System.out.println("T = T*F");:};
termino  ::= termino:a OP_DIVISION factor:b  {: 
    RESULT = new NodoDivision(a, b);
    System.out.println("T = T/F");
    reglas.add("Regla N°28: termino -> termino OP_DIVISION factor ");:};
termino  ::= factor:a  {:
    RESULT = a;
    System.out.println("T es F");
    reglas.add("Regla N°29: termino -> factor ");
    :};


factor   ::= PARENTESIS_ABRE expresion PARENTESIS_CIERRA  {: reglas.add("Regla N°30: factor -> PARENTESIS_ABRE expresion PARENTESIS_CIERRA "); :};

factor   ::= ID:id {:
    reglas.add("Regla N°31: factor -> ID");
    RESULT = new NodoIdentificador(id);
    System.out.println("ID");:};
factor   ::= CONST_DOU {:reglas.add("Regla N°32: factor -> CONST_DOU"); :};
factor   ::= CONST_BIN {: reglas.add("Regla N°33: factor -> CONST_BIN"); :};
factor   ::= CONST_INTEGER:cte {:
    reglas.add("Regla N°34: factor -> CONST_INTEGER");
    RESULT =new NodoConstante(Integer.parseInt(cte));
    System.out.println("cte");:};
factor   ::= funcioncontarprimos:f {:
    reglas.add("Regla N°35: factor -> funcioncontarprimos");
    RESULT = f;
    :};




iteracion ::= WHILE condicion:c LLAVE_ABRE sentencias:st LLAVE_CIERRA {:
    reglas.add("Regla N°36: iteracion -> WHILE condicion LLAVE_ABRE codigo LLAVE_CIERRA ");
    RESULT = new NodoCiclo(c,st);
    System.out.println("WHILE c {st}");
    :};



seleccion ::= IF condicion:c THEN sentencias:st ELSE sentencias:se ENDIF {:
    reglas.add("Regla N°38: seleccion -> IF condicion THEN sentencias ELSE sentencias ENDIF");
    RESULT= new NodoIf(c, st, se);
    System.out.println("IF c THEN st ELSE se ENDIF");
    :};
seleccion ::= IF condicion:c THEN sentencias:st ENDIF {:
    reglas.add("Regla N°38: seleccion -> IF condicion THEN sentencias ENDIF");
    RESULT= new NodoIf(c, st);
    System.out.println("IF c THEN st ENDIF");
    :};



condicion ::= comparacion:c {:
    reglas.add("Regla N°39: condicion -> comparacion");
    RESULT = c;
    :};
condicion ::= comparacion:c1 OP_AND comparacion:c2 {:
    reglas.add("Regla N°40: condicion -> comparacion OP_AND comparacion");
    RESULT = new NodoAnd(c1,c2);
    System.out.println("c1 AND c2");
    :};
condicion ::= comparacion:c1 OP_OR comparacion:c2 {: 
    reglas.add("Regla N°41: condicion -> comparacion OP_OR comparacion");
    RESULT = new NodoOr(c1,c2);
    System.out.println("c1 OR c2");
    :};


comparacion ::= PARENTESIS_ABRE  expresion:e1 comparador:c expresion:e2 PARENTESIS_CIERRA {:
    reglas.add("Regla N°42: comparacion -> PARENTESIS_ABRE  expresion == expresion PARENTESIS_CIERRA "); 
    RESULT = new NodoComparacion((String) c, e1, e2); 
    System.out.println("E1 c E2");
    :};
comparacion ::= OP_NOT comparacion:c  {:
    reglas.add("Regla N°43: comparacion -> OP_NOT comparacion  ");
    RESULT = new NodoNot(c);
    System.out.println("NOT c");
    :};


comparador ::= OP_MENOR:op {:
  reglas.add("Regla N°44: comparador -> OP_MENOR");
  RESULT = op;
  System.out.println("<");
  :};
comparador ::= OP_MAYOR:op {:
  reglas.add("Regla N°45: comparador -> OP_MAYOR");
  RESULT = op;
  System.out.println(">");
  :};
comparador ::= OP_MAYOR_IGUAL:op {:
  reglas.add("Regla N°46: comparador -> OP_MAYOR_IGUAL");
  RESULT = op;
  System.out.println("=>");
  :};
comparador ::= OP_MENOR_IGUAL:op {:
  reglas.add("Regla N°47: comparador -> OP_MENOR_IGUAL");
  RESULT = op;
  System.out.println("<=");
  :};
comparador ::= OP_IGUAL:op {:
  reglas.add("Regla N°48: comparador -> OP_IGUAL");
  RESULT = op;
  System.out.println("==");
  :};
comparador ::= OP_DISTINTO:op {:
  reglas.add("Regla N°49: comparador -> OP_DISTINTO ");
  RESULT = op;
  System.out.println("!=");
  :};

salida ::= WRITE ID {: reglas.add("Regla N°50: salida -> WRITE ID"); :};
salida ::= WRITE CONST_STR {: reglas.add("Regla N°51: salida -> WRITE CONST_STR"); :};


parametros ::= expresion:e {:
    reglas.add("Regla N°53: parametros -> expresion");
    List<NodoExpresion> lista = new ArrayList<>();
    lista.add((NodoExpresion)e);
    RESULT = lista;
    :};

parametros ::= expresion:e COMA parametros:resto {:
    reglas.add("Regla N°54: parametros -> expresion COMA parametros");
    ((List<NodoExpresion>)resto).add(0, (NodoExpresion)e); 
    RESULT = resto;
    :};

funcioncontarprimos ::= CONTAR_PRIMOS PARENTESIS_ABRE CORCHETE_ABRE parametros:p CORCHETE_CIERRA PARENTESIS_CIERRA {: 
    reglas.add("Regla N°52: funcioncontarprimos ->  CONTAR_PRIMOS PARENTESIS_ABRE CORCHETE_ABRE parametros CORCHETE_CIERRA PARENTESIS_CIERRA"); 
    List<NodoExpresion> listaExp = (List<NodoExpresion>)p;

    List<NodoSentencia> instrucciones = new ArrayList<>();
    NodoIdentificador k = new NodoIdentificador("k");
    NodoConstante cero = new NodoConstante(0);

    // k = 0;
    instrucciones.add(new NodoAsignacion(new NodoIdentificador("k"),new NodoConstante(0)));

    for (NodoExpresion expresion : listaExp) {

        // nro = expresion;
        /*instrucciones.add(new NodoAsignacion(
            new NodoIdentificador("nro"),
            expresion
        ));*/

        // i = 1;
        instrucciones.add(new NodoAsignacion(
            new NodoIdentificador("i"),
            new NodoConstante(1)
        ));

        // j = 0;
        instrucciones.add(new NodoAsignacion(
            new NodoIdentificador("j"),
            new NodoConstante(0)
        ));

        // while (i <= nro)
        NodoComparacion condicionWhile = new NodoComparacion(
            "<=",
            new NodoIdentificador("i"),
            new NodoIdentificador("nro")
        );

        List<NodoSentencia> cuerpoWhile = new ArrayList<>();

        // c = nro / i;
        cuerpoWhile.add(new NodoAsignacion(
            new NodoIdentificador("c"),
            new NodoDivision(
                new NodoIdentificador("nro"),
                new NodoIdentificador("i")
            )
        ));

        // resultado = nro - (c * i)
        NodoMultiplicacion producto = new NodoMultiplicacion(
            new NodoIdentificador("c"),
            new NodoIdentificador("i")
        );
        NodoResta resta = new NodoResta(
            new NodoIdentificador("nro"),
            producto
        );
        NodoAsignacion resultado = new NodoAsignacion(new NodoIdentificador("resultado"), resta);

        // Agregás la sentencia al cuerpo del while (o donde corresponda)
        cuerpoWhile.add(resultado);

        // if (resultado == 0)
        NodoComparacion condicionIf = new NodoComparacion(
            "==",
            new NodoIdentificador("resultado"),
            new NodoConstante(0)
        );

        // j = j + 1;
        NodoAsignacion jIncremento = new NodoAsignacion(
            new NodoIdentificador("j"),
            new NodoSuma(
                new NodoIdentificador("j"),
                new NodoConstante(1)
            )
        );

        List<NodoSentencia> cuerpoIf = new ArrayList<>();
        cuerpoIf.add(jIncremento);

        cuerpoWhile.add(new NodoIf(condicionIf, cuerpoIf));

        // i = i + 1;
        cuerpoWhile.add(new NodoAsignacion(
            new NodoIdentificador("i"),
            new NodoSuma(
                new NodoIdentificador("i"),
                new NodoConstante(1)
            )
        ));

        instrucciones.add(new NodoCiclo(condicionWhile, cuerpoWhile));

        // if (j == 2) k = k + 1;
        NodoComparacion condicionJ = new NodoComparacion(
            "==",
            new NodoIdentificador("j"),
            new NodoConstante(2)
        );
        NodoAsignacion kIncremento = new NodoAsignacion(
            new NodoIdentificador("k"),
            new NodoSuma(
                new NodoIdentificador("k"),
                new NodoConstante(1)
            )
        );

        List<NodoSentencia> cuerpoIfFinal = new ArrayList<>();
        cuerpoIfFinal.add(kIncremento);

        instrucciones.add(new NodoIf(condicionJ, cuerpoIfFinal));
    }

    RESULT = new NodoContarPrimos(instrucciones, new NodoIdentificador("k"));

    :};

